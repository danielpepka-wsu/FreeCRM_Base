@page "/authorization/plugin"
@attribute [IgnoreAntiforgeryToken]
@using Plugins
@inject FreeLLM.IDataAccess data
@inject Microsoft.AspNetCore.Hosting.Server.IServer server
@inject IPlugins plugins
@inject IHttpContextAccessor _httpContext;
@{
    data.SetHttpRequest(Request);
    data.SetHttpResponse(Response);

    if (_httpContext != null && _httpContext.HttpContext != null) {
        data.SetHttpContext(_httpContext.HttpContext);
    } else {
        <h1>Error</h1>
        <p>Unable to access the HttpContext.</p>
        return;
    }

    string strTenantId = "";

    try {
        strTenantId += data.Request("TenantId");
    } catch { }

    Guid tenantId = Guid.Empty;
    try {
        tenantId = new Guid(strTenantId);
    } catch { }

    if (tenantId == Guid.Empty) {
        <h1>Error</h1>
        <p>Unable to find a valid Tenant Id.</p>
        return;
    }

    string strPluginName = "";
    string strPluginNameRaw = "";
    try {
        strPluginNameRaw += data.Request("Name");
        strPluginName += strPluginNameRaw.Replace("_", " ");
    } catch { }

    if (String.IsNullOrWhiteSpace(strPluginName)) {
        <h1>Error</h1>
        <p>Missing Plugin Name</p>
        return;
    }

    var plugin = plugins.AllPlugins.FirstOrDefault(x => x.Name.ToLower() == strPluginName.ToLower() && x.Type.ToLower() == "auth");
    if (plugin == null) {
        <h1>Error</h1>
        <p>Plugin &ldquo;@strPluginName&rdquo; Not Found</p>
        return;
    }

    string fingerprint = data.Request("Fingerprint");

    //var promptValues = new List<FreeLLM.DataObjects.Dictionary>();
    List<PluginPromptValue>? promptValues = null;
    var missingPrompts = new List<string>();
    //var updatedPrompts = new Dictionary<string, object>();

    if (plugin.Prompts != null && plugin.Prompts.Count > 0) {
        // This plugin uses prompts, so get the encrypted prompts from the URL
        var prompts = data.Request("Prompts");
        if (!String.IsNullOrWhiteSpace(prompts)) {
            promptValues = data.DecryptObject<List<PluginPromptValue>>(prompts);
        } else {
            <h1>Error</h1>
            <p>Missing Encrypted Prompts</p>
            return;
        }

        // Make sure we have a value for each prompt.
        int index = -1;
        foreach(var prompt in plugin.Prompts) {
            index++;

            if (prompt.Required) {
                var value = String.Empty;

                if (promptValues != null) {
                    var promptValue = promptValues.FirstOrDefault(x => x.Name.ToLower() == prompt.Name.ToLower());
                    if (promptValue != null && promptValue.Values != null && promptValue.Values.Length > 0) {
                        value += promptValue.Values[0];
                    }
                }

                if (String.IsNullOrWhiteSpace(value)) {
                    missingPrompts.Add(prompt.Name);
                }
            }
        }
    }

    if (missingPrompts.Count > 0) {
        if (missingPrompts.Count > 1) {
            <h1>Error - Missing Prompt Values</h1>
            <ul>
                @foreach(var item in missingPrompts) {
                    <li>@item</li>
                }
            </ul>
        } else {
            <h1>Error - Missing Prompt Value</h1>
            <p>@missingPrompts[0]</p>
        }
        return;
    }

    string serverUrl = data.ApplicationURL;
    if (String.IsNullOrWhiteSpace(serverUrl)) {
        <h1>Error</h1>
        <p>Unable to read server URL.</p>
        return;
    }

    if (!serverUrl.EndsWith("/")) {
        serverUrl += "/";
    }

    string returnUrl = serverUrl + "Authorization/Plugin?Name=" + strPluginNameRaw + "&TenantId=" + strTenantId + "&Fingerprint=" + fingerprint;

    // Now, make sure we can access this tenant and that this tenant has cutom auth configured.
    var tenant = data.GetTenant(tenantId);
    if (tenant == null || tenant.ActionResponse.Result == false || tenant.Enabled == false) {
        <h1>Error</h1>
        <p>The Tenant Id passed does not match a current active tenant.</p>
        return;
    }

    // Make sure the plugin has valid code.
    if (String.IsNullOrWhiteSpace(plugin.Code)) {
        <h1>Error</h1>
        <p>The plugin &ldquo;@strPluginName&rdquo; does not have any code.</p>
        return;
    }

    // Use a copy of the plugin.
    var copy = data.DuplicateObject<Plugin>(plugin);
    if (copy == null) {
        copy = new Plugin();
    }

    if (promptValues != null && promptValues.Count > 0) {
        copy.PromptValues = promptValues;
    }

    copy.Invoker = "Login";
    var req = new PluginExecuteRequest {
        Plugin = copy,
        Objects = new object[] { returnUrl, tenantId, _httpContext.HttpContext },
    };

    var result = data.ExecutePlugin(req);

    var user = data.DeserializeObject<FreeLLM.DataObjects.User>(data.SerializeObject(result.Objects?.FirstOrDefault()));

    if (user != null && !String.IsNullOrWhiteSpace(user.Email)) {
        Guid userId = Guid.Empty;

        var exists = await data.GetUserByEmailAddress(tenantId, user.Email);

        if (exists != null && exists.ActionResponse.Result) {
            userId = exists.UserId;
        } else {
            // See if this tenant allows creating new users.
            if (tenant.TenantSettings.RequirePreExistingAccountToLogIn) {
                <h1>Error</h1>
                <p>No local account configured. Please contact the application admin.</p>
                return;
            } else {
                // Create the new account
                var addUser = new FreeLLM.DataObjects.User {
                    UserId = Guid.Empty,
                    TenantId = tenantId,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Email = user.Email,
                    EmployeeId = user.EmployeeId,
                    DepartmentName = user.DepartmentName,
                    Title = user.Title,
                    Username = user.Username,
                    Admin = false,
                    Enabled = true,
                    Source = plugin.Name,
                };

                var savedUser = await data.SaveUser(addUser);

                if (savedUser != null && savedUser.ActionResponse.Result) {
                    userId = savedUser.UserId;
                }
            }
        }

        if (userId != Guid.Empty) {
            string token = data.GetUserToken(tenantId, userId, fingerprint);

            await data.UpdateUserFromPlugins(userId);

            data.CookieWrite("user-token", token);
            data.CookieWrite("Login-Method", "Plugin:" + plugin.Name);

            await data.UpdateUserLastLoginTime(userId, plugin.Name);

            // Make sure if this is an AppAdmin they have accounts in all tenents.
            var validatedAppAdmin = await data.GetUser(userId, true);

            string requestedUrl = data.CookieRead("requested-url");

            if (!String.IsNullOrWhiteSpace(requestedUrl)) {
                data.CookieWrite("requested-url", "");
                data.Redirect(requestedUrl);
            } else {
                data.Redirect(serverUrl);
            }
        } else {
            <h1>Login Error</h1>
        }
    } else {
        if (result.Messages.Count > 0) {
            if (result.Messages.Count == 1) {
                <h1>Error</h1>
                <p>@result.Messages[0]</p>
            } else {
                <h1>Errors</h1>
                <ul>
                    @foreach(var item in result.Messages) {
                        <li>@item</li>
                    }
                </ul>
            }
        } else {
            <h1>Error - Invalid Login</h1>
        }
    }
}