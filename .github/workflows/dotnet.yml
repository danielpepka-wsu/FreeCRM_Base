name: .NET (Windows + Remove + Rename + Artifacts)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      selections:
        description: "Comma-separated highestâ†’lowest to remove (e.g., 6,5,4)"
        required: false
        default: "6,5,4,3,2,1"
      delay_ms:
        description: "Delay (ms) between lines sent to the app"
        required: false
        default: "1000"

# ------------------------------
# 1) Build the feeder once, upload as artifact
# ------------------------------
jobs:
  feeder:
    runs-on: windows-latest
    steps:
      - name: Setup .NET 9 & 8 SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Create feeder project
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path tools\StdInFeeder | Out-Null

          $code = @(
            'using System;'
            'using System.Diagnostics;'
            'using System.IO;'
            'using System.Text;'
            ''
            'class Program'
            '{'
            '    static int Main(string[] args)'
            '    {'
            '        string exe = null;'
            '        string inputPath = null;'
            '        int delay = 500;'
            '        for (int i = 0; i < args.Length; i++)'
            '        {'
            '            switch (args[i])'
            '            {'
            '                case "--exe":   exe = args[++i]; break;'
            '                case "--input": inputPath = args[++i]; break;'
            '                case "--delay": delay = int.Parse(args[++i]); break;'
            '            }'
            '        }'
            '        if (string.IsNullOrWhiteSpace(exe) || !File.Exists(exe))'
            '        {'
            '            Console.Error.WriteLine($"Target exe not found: {exe}");'
            '            return 2;'
            '        }'
            '        if (string.IsNullOrWhiteSpace(inputPath) || !File.Exists(inputPath))'
            '        {'
            '            Console.Error.WriteLine($"Input file not found: {inputPath}");'
            '            return 3;'
            '        }'
            '        var psi = new ProcessStartInfo'
            '        {'
            '            FileName = exe,'
            '            UseShellExecute = false,'
            '            RedirectStandardInput = true,'
            '            RedirectStandardOutput = true,'
            '            RedirectStandardError = true,'
            '            CreateNoWindow = true'
            '        };'
            '        using var p = new Process { StartInfo = psi };'
            '        p.OutputDataReceived += (_, e) => { if (e.Data != null) Console.WriteLine(e.Data); };'
            '        p.ErrorDataReceived  += (_, e) => { if (e.Data != null) Console.Error.WriteLine(e.Data); };'
            '        if (!p.Start()) return 4;'
            '        p.BeginOutputReadLine();'
            '        p.BeginErrorReadLine();'
            '        foreach (var line in File.ReadAllLines(inputPath, Encoding.ASCII))'
            '        {'
            '            p.StandardInput.WriteLine(line);'
            '            p.StandardInput.Flush();'
            '            System.Threading.Thread.Sleep(delay);'
            '        }'
            '        p.StandardInput.Close();'
            '        p.WaitForExit();'
            '        return p.ExitCode;'
            '    }'
            '}'
          )
          Set-Content -Path tools\StdInFeeder\Program.cs -Value $code -Encoding UTF8

          $proj = @(
            '<Project Sdk="Microsoft.NET.Sdk">',
            '  <PropertyGroup>',
            '    <OutputType>Exe</OutputType>',
            '    <TargetFramework>net8.0</TargetFramework>',
            '    <ImplicitUsings>enable</ImplicitUsings>',
            '    <Nullable>enable</Nullable>',
            '    <PublishSingleFile>true</PublishSingleFile>',
            '    <RuntimeIdentifier>win-x64</RuntimeIdentifier>',
            '    <SelfContained>false</SelfContained>',
            '  </PropertyGroup>',
            '</Project>'
          )
          Set-Content -Path tools\StdInFeeder\StdInFeeder.csproj -Value $proj -Encoding UTF8

          dotnet publish tools\StdInFeeder -c Release -o tools\StdInFeeder\out

      - name: Upload artifact - stdin_feeder
        uses: actions/upload-artifact@v4
        with:
          name: stdin_feeder
          path: tools/StdInFeeder/out
          if-no-files-found: error
          retention-days: 30

  # ------------------------------
  # 2) Main build that *uses* the feeder artifact
  # ------------------------------
  build:
    runs-on: windows-latest
    needs: feeder
    env:
      REMOVE_EXE: '.\Remove Modules from FreeCRM.exe'
      RENAME_EXE: '.\Rename FreeCRM.exe'
      APP_NAME: 'FreeCICD'
      SELECTIONS: ${{ github.event.inputs.selections }}
      DELAY_MS:  ${{ github.event.inputs.delay_ms }}
      FEEDER_EXE: '.\tools\StdInFeeder\out\StdInFeeder.exe'

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 9 & 8 SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Download feeder artifact
        uses: actions/download-artifact@v4
        with:
          name: stdin_feeder
          path: tools/StdInFeeder/out

      - name: Verify feeder exists
        shell: pwsh
        run: |
          if (-not (Test-Path $env:FEEDER_EXE)) { throw "Feeder EXE not found at $env:FEEDER_EXE" }
          Get-Item $env:FEEDER_EXE | Format-List *

      - name: Remove modules using feeder
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $exe = $env:REMOVE_EXE
          if (-not (Test-Path $exe)) { throw "Remove utility not found at: $exe" }

          $selections = if ([string]::IsNullOrWhiteSpace($env:SELECTIONS)) { "6,5,4,3,2,1" } else { $env:SELECTIONS }
          $delayMs    = if ([string]::IsNullOrWhiteSpace($env:DELAY_MS)) { 1000 } else { [int]$env:DELAY_MS }

          $targets =
            $selections -split ',' |
            ForEach-Object { $_.Trim() } |
            Where-Object { $_ -match '^\d+$' } |
            ForEach-Object { [int]$_ } |
            Sort-Object -Descending

          if (-not $targets) { throw "No valid numeric selections in: '$selections'" }

          foreach ($n in $targets) {
            Write-Host "`n=== $exe with selection $n, then 'x' ==="
            Set-Content -Path input.txt -Value @("$n","x") -Encoding ASCII
            & $env:FEEDER_EXE --exe "$exe" --input "input.txt" --delay $delayMs
            if ($LASTEXITCODE -ne 0) { throw "Remove run failed for selection $n (exit $LASTEXITCODE)" }
            Remove-Item input.txt -Force -ErrorAction SilentlyContinue
          }

      - name: Rename project using feeder
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $exe  = $env:RENAME_EXE
          if (-not (Test-Path $exe)) { throw "Rename utility not found at: $exe" }

          $name = if ([string]::IsNullOrWhiteSpace($env:APP_NAME)) { "FreeCICD" } else { $env:APP_NAME }
          if ($name -notmatch '^[A-Za-z]+$') { throw "APP_NAME '$name' is invalid. Use letters only (e.g., FreeCICD)." }

          Set-Content -Path rename.txt -Value @("$name") -Encoding ASCII
          & $env:FEEDER_EXE --exe "$exe" --input "rename.txt" --delay 500
          if ($LASTEXITCODE -ne 0) { throw "Rename run failed (exit $LASTEXITCODE)" }
          Remove-Item rename.txt -Force -ErrorAction SilentlyContinue

      - name: Detect solution after changes
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if (-not $sln) { throw "No .sln found after modifications." }
          "SLN_PATH=$($sln.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Clean (remove bin/obj, etc.)
        shell: pwsh
        run: dotnet clean "$env:SLN_PATH" -v minimal

      - name: Directory snapshot (after rename + clean)
        shell: pwsh
        run: |
          Write-Host "=== RECURSIVE TREE (after rename + clean) ==="
          cmd /c tree /F /A
          Write-Host "=== END TREE ==="

      # --- Create and upload a source snapshot (code that was compiled) ---
      - name: Stage source snapshot
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts\source_snapshot | Out-Null
          robocopy . artifacts\source_snapshot /E /XD .git artifacts
          if ($LASTEXITCODE -ge 8) { throw "robocopy failed with code $LASTEXITCODE" }

      - name: Upload artifact - source_snapshot
        uses: actions/upload-artifact@v4
        with:
          name: source_snapshot
          path: artifacts/source_snapshot
          if-no-files-found: error
          retention-days: 14

      - name: Restore
        shell: pwsh
        run: dotnet restore "$env:SLN_PATH"

      - name: Build
        shell: pwsh
        run: dotnet build --no-restore "$env:SLN_PATH"

      - name: Test
        shell: pwsh
        run: dotnet test --no-build --verbosity normal "$env:SLN_PATH"

      # --- Publish the web app and upload it ---
      - name: Publish web app (Release)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $pubDir = Join-Path $PWD 'artifacts\published_webapp'
          New-Item -ItemType Directory -Force -Path $pubDir | Out-Null

          $webProj = Get-ChildItem -Recurse -Filter *.csproj | Where-Object {
            (Get-Content $_.FullName -Raw) -match 'Sdk="Microsoft\.NET\.Sdk\.Web"'
          } | Select-Object -First 1

          if (-not $webProj) {
            $try = Join-Path $PWD 'CRM\CRM.csproj'
            if (Test-Path $try) { $webProj = Get-Item $try }
          }
          if (-not $webProj) { $webProj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1 }

          Write-Host "Publishing project: $($webProj.FullName)"
          dotnet publish $webProj.FullName -c Release -o $pubDir

      - name: Upload artifact - published_webapp
        uses: actions/upload-artifact@v4
        with:
          name: published_webapp
          path: artifacts/published_webapp
          if-no-files-found: error
          retention-days: 14

  # ------------------------------
  # 3) Fresh runner to prove artifacts download/inspect
  # ------------------------------
  inspect-artifacts:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download published_webapp
        uses: actions/download-artifact@v4
        with:
          name: published_webapp
          path: inspect\published_webapp

      - name: Download source_snapshot
        uses: actions/download-artifact@v4
        with:
          name: source_snapshot
          path: inspect\source_snapshot

      - name: Show trees of downloaded artifacts
        shell: pwsh
        run: |
          Write-Host "=== PUBLISHED WEBAPP ==="
          cmd /c tree /F /A inspect\published_webapp
          Write-Host "=== SOURCE SNAPSHOT ==="
          cmd /c tree /F /A inspect\source_snapshot
