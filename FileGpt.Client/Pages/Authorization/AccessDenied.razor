@page "/Authorization/AccessDenied"
@page "/{TenantCode}/Authorization/AccessDenied"
@implements IDisposable
@using Blazored.LocalStorage
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject BlazorDataModel Model
@if (Model.View == _pageName){
    <h1 class="page-title">
        <Language Tag="AccessDenied" IncludeIcon="true" />
        @if (!String.IsNullOrWhiteSpace(_info)) {
            <span>&nbsp;</span><Language Tag="From" />
            <span>@_info</span>
        }
    </h1>

    <button type="button" class="btn btn-primary" @onclick="Back">
        <Language Tag="BackToLogin" IncludeIcon="true" />
    </button>
}
@code {
    [Parameter] public string? TenantCode { get; set; }

    private string _info = "";

    protected string _pageName = "accessdenied";

    public void Dispose() { 
        Model.OnChange -= OnDataModelUpdated;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
        }
    }

    protected override void OnInitialized()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        Model.View = _pageName;

        string url = Helpers.Uri;
        if (!String.IsNullOrWhiteSpace(url)) {
            string source = Helpers.GetQuerystringValue(url, "AuthMethod");

            if (!String.IsNullOrWhiteSpace(source)) {
                _info = source;
            }
        }
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected void Back()
    {
        Helpers.NavigateTo("Login");
    }
}
