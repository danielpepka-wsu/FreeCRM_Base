@page "/"
@page "/{TenantCode}"
@inject BlazorDataModel Model
@implements IDisposable

@if (Model.Loaded && Model.LoggedIn && Model.View == _pageName) {
    if (!String.IsNullOrWhiteSpace(LogoUrl) && Model.Tenant.TenantSettings.LogoIncludedOnHomePage) {
        <div class="home-page-logo-container">
            <img src="@LogoUrl" class="logo-homepage" />
        </div>
    }

    <h1 class="page-title">
        @if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.AppIcon)) {
            <i>@((MarkupString)Model.Tenant.TenantSettings.AppIcon)</i>
        }
        <Language Tag="Welcome" ReplaceSpaces="true" /> @Model.User.FirstName
    </h1>

    <div class="mb-2">
        <a href="@Helpers.BuildUrl("Monaco")" class="btn btn-primary">
            Monaco Editor Testing
        </a>

        <a href="@Helpers.BuildUrl("Plugins")" class="btn btn-primary">
            Plugin Testing
        </a>

        <a href="@Helpers.BuildUrl("TimerTest")" class="btn btn-primary">
            Timer Test Page
        </a>

        <a href="@Helpers.BuildUrl("SortTest")" class="btn btn-primary">
            Sort Test Page
        </a>

        <a href="@Helpers.BuildUrl("DoubleClick")" class="btn btn-primary">
            Double-Click
        </a>
    </div>

    <div class="mb-2">Fingerprint: @Model.Fingerprint</div>
}
@code {
    [Parameter] public string? TenantCode { get; set; }

    protected bool _loadedData = false;
    protected bool _loading = false;
    protected string _pageName = "home";

    protected System.Timers.Timer _timer = new System.Timers.Timer();

    public void Dispose() {
        _timer.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
            Model.OnChange += OnDataModelUpdated;
        }

        if (Model.Loaded) {
            if (Model.LoggedIn) {
                if (!_loadedData) {
                    _loadedData = true;
                    await Helpers.ValidateUrl(TenantCode, true);
                }
            } else {
                Helpers.NavigateTo("Login");
            }
        }
    }

    protected override void OnInitialized()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        _timer = new System.Timers.Timer();
        _timer.Interval = 1000;
        _timer.Elapsed += TimerExecuted;
        _timer.AutoReset = true;
        //_timer.Start();

        Model.View = _pageName;
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected string LogoUrl
    {
        get {
            string output = "";

            if (Model.Tenant.TenantSettings.Logo.HasValue && Model.Tenant.TenantSettings.Logo != Guid.Empty) {
                output = Model.ApplicationUrl + "File/View/" + ((Guid)Model.Tenant.TenantSettings.Logo).ToString();
            }

            return output;
        }
    }

    protected void TimerExecuted(Object? source, System.Timers.ElapsedEventArgs e)
    {
        Console.WriteLine("Timer Executed");
    }
}
