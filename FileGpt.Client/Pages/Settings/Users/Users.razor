@page "/Settings/Users"
@page "/{TenantCode}/Settings/Users"
@implements IDisposable
@using Blazored.LocalStorage
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject BlazorDataModel Model
@if (Model.Loaded && Model.View == _pageName) {
    if (_loading) {
        <h1 class="page-title">
            <Language Tag="Users" IncludeIcon="true" />
        </h1>
        <LoadingMessage />
    } else {
        <div class="@Model.StickyMenuClass">
            <h1 class="page-title">
                <Language Tag="Users" IncludeIcon="true" />
                <StickyMenuIcon />
            </h1>
            <div class="mb-2">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-success" @onclick="AddUser">
                        <Language Tag="AddNewUser" IncludeIcon="true" />
                    </button>

                    <button type="button" class="btn btn-warning" @onclick="ClearFilter" disabled="@Filter.Loading">
                        <Language Tag="Clear" IncludeIcon="true" />
                    </button>

                    @if (Filter.ShowFilters) {
                        <button type="button" class="btn btn-dark" @onclick="ToggleShowFilter" disabled="@Filter.Loading">
                            <Language Tag="HideFilter" IncludeIcon="true" />
                        </button>
                    } else {
                        <button type="button" class="btn btn-dark" @onclick="ToggleShowFilter" disabled="@Filter.Loading">
                            <Language Tag="ShowFilter" IncludeIcon="true" />
                        </button>
                    }

                    <button type="button" class="btn btn-dark" @onclick="Refresh" disabled="@Filter.Loading">
                        <Language Tag="Refresh" IncludeIcon="true" />
                    </button>
                </div>
                @if (Filter.ShowFilters && !Filter.Loading) {
                    <div class="keyword-search mb-2">
                        <label for="users-filter-keyword"><Language Tag="Search" /></label>
                        <div class="fixed-200">
                            <input type="text"
                                   id="users-filter-keyword"
                                   class="form-control"
                                   @bind="Filter.Keyword"
                                   @bind:after="LoadFilter"
                                   placeholder="@FilterSearchPlaceholder" />
                        </div>
                    </div>

                }
            </div>
        </div>

        if (Filter.ShowFilters) {
            <div class="row mb-2">
                @if (Model.FeatureEnabledDepartments && Model.Departments.Any()) {
                    <div class="col col-lg-2 col-md-3 col-sm-4 col-12 mb-2">
                        <label for="filter-users-departments">
                            <Language Tag="Departments" />
                        </label>
                        <select class="form-select" id="filter-users-departments" multiple size="4" @bind="Filter.FilterDepartments" @bind:after="LoadFilter">
                            @foreach (var item in Model.Departments.OrderBy(x => x.DepartmentName)) {
                                if (Filter.FilterDepartments != null && Filter.FilterDepartments.Contains(item.DepartmentId)) {
                                    <option value="@item.DepartmentId" selected>@item.DepartmentName</option>
                                } else {
                                    <option value="@item.DepartmentId">@item.DepartmentName</option>
                                }
                            }
                        </select>
                    </div>
                }

                <div class="col col-lg-2 col-md-3 col-sm-4 col-12 mb-2">
                    <label for="users-filter-enabled"><Language Tag="Enabled" /></label>
                    <select class="form-control" size="4" id="users-filter-enabled" @bind="Filter.Enabled" @bind:after="LoadFilter">
                        @if (String.IsNullOrWhiteSpace(Filter.Enabled)) {
                            <option value="" selected>All</option>
                        } else {
                            <option value="">All</option>
                        }

                        @if (Helpers.StringLower(Filter.Enabled) == "enabled") {
                            <option value="enabled" selected><Language Tag="EnabledUsersOnly" /></option>
                        } else {
                            <option value="enabled"><Language Tag="EnabledUsersOnly" /></option>
                        }

                        @if (Helpers.StringLower(Filter.Enabled) == "disabled"){
                            <option value="disabled" selected><Language Tag="DisabledUsersOnly" /></option>
                        } else {
                            <option value="disabled"><Language Tag="DisabledUsersOnly" /></option>
                        }
                    </select>
                </div>

                <div class="col col-lg-2 col-md-3 col-sm-4 col-12 mb-2">
                    <label for="users-filter-admin"><Language Tag="Admin" /></label>
                    <select class="form-control" size="4" id="users-filter-admin" @bind="Filter.Admin" @bind:after="LoadFilter">
                        @if (String.IsNullOrWhiteSpace(Filter.Admin)) {
                            <option value="" selected><Language Tag="All" /></option>
                        } else {
                            <option value=""><Language Tag="All" /></option>
                        }

                        @if (Helpers.StringLower(Filter.Admin) == "admin") {
                            <option value="admin" selected><Language Tag="AdminUsersOnly" /></option>
                        } else {
                            <option value="admin"><Language Tag="AdminUsersOnly" /></option>
                        }

                        @if (Helpers.StringLower(Filter.Admin) == "standard") {
                            <option value="standard" selected><Language Tag="NonAdminUsersOnly" /></option>
                        } else {
                            <option value="standard"><Language Tag="NonAdminUsersOnly" /></option>
                        }
                    </select>
                </div>

                @for (int x = 1; x < 11; x++) {
                    int udfItem = x;
                    var udfOptions = Model.UdfFilterOptions("Users", udfItem);
                    string udfLabel = Model.UdfLabel("Users", udfItem);

                    if (!String.IsNullOrEmpty(udfLabel) && udfOptions.Any() && Model.UdfShowInFilter("Users", udfItem)) {
                        <div class="col-3 mb-2">
                            <label for="users-filter-UDF@(udfItem)">@((MarkupString)udfLabel)</label>
                            <select class="form-select" size="4"
                                    id="users-filter-UDF@(udfItem)"
                                    value="@(Helpers.GetObjectPropertyValue<string>(Filter, "UDF" + (udfItem < 10 ? "0" : "") + udfItem.ToString()))"
                                    @onchange="@((ChangeEventArgs e) => FilterChangedUDF(e, udfItem))">
                                <option value=""></option>
                                @foreach (var item in udfOptions) {
                                    <option value="@item">@item</option>
                                }
                            </select>
                        </div>
                    }
                }

            </div>

            <div class="mb-2">
                <div class="form-check form-switch">
                    <input type="checkbox"
                        id="users-filter-IncludeDeletedRecords"
                        class="form-check-input"
                        @bind="Model.User.UserPreferences.IncludeDeletedItems"
                        @bind:after="LoadFilter"
                    />
                    <label for="users-filter-IncludeDeletedRecords" class="form-check-label">
                        <Language Tag="IncludeDeletedRecords" />
                    </label>
                </div>
            </div>
        }

        @if (Filter.Loading) {
            <LoadingMessage />
        } else {
            if (Filter.RecordCount == 0) {
                <Language Tag="NoItemsToShow" />
            } else {
                <PagedRecordset ActionHandlers="ActionHandlers"
                    CenterItems="CenterItems"
                    Configuration="Config"
                    Formatters="Formatters"
                    NavigationCallbackHander="NavigationCallbackHander"
                    NavigationLocation="PagedRecordset.NavLocation.Both"
                    RecordData="Data"
                    RowClasses="_rowClasses"
                    UseBootstrap="true" />
            }
        }
    }
}
@code {
    [Parameter] public string? TenantCode { get; set; }
    // MultiSelect msItem;

    List<PagedRecordset.ActionHandler> ActionHandlers = new List<PagedRecordset.ActionHandler>();
    Dictionary<string, Action?> CenterItems = new Dictionary<string, Action?>();
    PagedRecordset.Config Config = new PagedRecordset.Config();
    PagedRecordset.Recordset Data = new PagedRecordset.Recordset();
    DataObjects.FilterUsers Filter = new DataObjects.FilterUsers();
    List<PagedRecordset.Formatter> Formatters = new List<PagedRecordset.Formatter>();
    protected bool _loadedData = false;
    protected bool LoadedFilter = false;
    protected bool _loading = true;
    protected List<string> _rowClasses = new List<string>();

    protected string _pageName = "users";

    public void Dispose()
    {
        Model.OnChange -= OnDataModelUpdated;
        Model.OnSignalRUpdate -= SignalRUpdate;

        Model.Subscribers_OnChange.Remove(_pageName);
        Model.Subscribers_OnSignalRUpdate.Remove(_pageName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
        }

        Config = new PagedRecordset.Config {
            TextFirstRecord = Helpers.Text("FirstRecord"),
            TextLastRecord = Helpers.Text("LastRecord"),
            TextNextRecord = Helpers.Text("NextRecord"),
            TextOf = Helpers.Text("Of"),
            TextPreviousRecord = Helpers.Text("PreviousRecord"),
            TextRecord = Helpers.Text("Record"),
            TextRecords = Helpers.Text("Records"),
            TextRecordsPerPage = Helpers.Text("RecordsPerPage"),
            TextShowing = Helpers.Text("Showing"),
            TextShowingAllRecords = Helpers.Text("ShowingAllRecords"),
        };

        if (Model.Loaded && Model.LoggedIn) {
            if (!Model.User.Admin) {
                Helpers.NavigateToRoot();
                return;
            }

            await Helpers.ValidateUrl(TenantCode);

            if (!_loadedData) {
                _loadedData = true;
                await LoadData();
            }
        }
    }

    protected override void OnInitialized()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        if (!Model.Subscribers_OnSignalRUpdate.Contains(_pageName)){
            Model.Subscribers_OnSignalRUpdate.Add(_pageName);
            Model.OnSignalRUpdate += SignalRUpdate;
        }

        Model.View = _pageName;
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected async Task LoadData()
    {
        if (!Model.Departments.Any()) {
            await Helpers.LoadDepartments();
        }

        if (!Model.udfLabels.Any()) {
            await Helpers.LoadUdfLabels();
        }

        ActionHandlers = new List<PagedRecordset.ActionHandler> {
            new PagedRecordset.ActionHandler {
                CallbackHandler = OnRecordSelected,
                ActionElement =
                    "<button type=\"button\" class=\"btn btn-xs btn-primary nowrap action-button\">" +
                    Helpers.IconAndText("Edit") +
                    "</button>"
            },
        };

        if (Model.FeatureEnabledInvoices) {
            ActionHandlers.Add(new PagedRecordset.ActionHandler {
                CallbackHandler = OnShowInvoices,
                ActionElement =
                    "<button type=\"button\" class=\"btn btn-xs btn-secondary nowrap action-button\">" +
                    Helpers.IconAndText("Invoices") +
                    "</button>"
            });
        }

        CenterItems = new Dictionary<string, Action?>();

        Formatters = new List<PagedRecordset.Formatter> {
                new PagedRecordset.Formatter {
                    DataType = "datetime",
                    CallbackHandler = FormatDateTimeValue,
                },
                new PagedRecordset.Formatter {
                    DataType = "Email",
                    CallbackHandler = FormatEmailAddress,
                },
                new PagedRecordset.Formatter {
                    DataType = "Photo",
                    CallbackHandler = FormatPhoto,
                },
            };

        // Get the saved filter if it exists.
        Filter = Model.User.UserPreferences.filterUsers;
        if(Filter.FilterDepartments == null){ Filter.FilterDepartments = new Guid[] { }; }

        await LoadFilter();
    }

    protected void AddUser()
    {
        Helpers.NavigateTo("Settings/AddUser");
    }

    protected async Task ClearFilter()
    {
        Filter.Admin = null;
        Filter.CultureCode = Model.CultureCode;
        Filter.Keyword = null;
        Filter.Sort = "lastLogin";
        Filter.SortOrder = "DESC";
        Filter.Page = 1;
        Filter.FilterDepartments = new Guid[] { };
        Filter.udf01 = null;
        Filter.udf02 = null;
        Filter.udf03 = null;
        Filter.udf04 = null;
        Filter.udf05 = null;
        Filter.udf06 = null;
        Filter.udf07 = null;
        Filter.udf08 = null;
        Filter.udf09 = null;
        Filter.udf10 = null;

        Model.User.UserPreferences.IncludeDeletedItems = false;

        await LoadFilter();
    }

    protected async Task FilterChangedUDF(ChangeEventArgs e, int Item)
    {
        string value = String.Empty;
        if(e.Value != null) {
            try {
                value += e.Value.ToString();
            } catch { }
        }

        switch (Item) {
            case 1:
                Filter.udf01 = value;
                break;
            case 2:
                Filter.udf02 = value;
                break;
            case 3:
                Filter.udf03 = value;
                break;
            case 4:
                Filter.udf04 = value;
                break;
            case 5:
                Filter.udf05 = value;
                break;
            case 6:
                Filter.udf06 = value;
                break;
            case 7:
                Filter.udf07 = value;
                break;
            case 8:
                Filter.udf08 = value;
                break;
            case 9:
                Filter.udf09 = value;
                break;
            case 10:
                Filter.udf10 = value;
                break;
        }

        await LoadFilter();
    }

    protected string FilterSearchPlaceholder
    {
        get {
            string output = Helpers.Text("SearchUsers");
            return output;
        }
    }

    protected string FormatDateTimeValue(string? value)
    {
        string output = "";

        if (!String.IsNullOrWhiteSpace(value)) {
            try {
                var dt = Convert.ToDateTime(value);
                //output = dt.ToShortDateString() + " " + dt.ToShortTimeString();
                output = Helpers.FormatDateTime(dt);
            }
            catch { }
        }

        return output;
    }

    protected string FormatEmailAddress(string? value)
    {
        string output = "";

        if (!String.IsNullOrWhiteSpace(value)) {
            output = "<a href=\"mailto:" + value + "\">" + value + "</a>";
        }

        return output;
    }

    protected string FormatPhoto(string? value)
    {
        string output = "";

        if (!String.IsNullOrWhiteSpace(value)) {
            output = "<img src=\"" + Helpers.BaseUri + "File/View/" + value + "\" class=\"paged-recordset-photo\" />";
        }

        return output;
    }

    protected async Task LoadFilter()
    {
        if (Model.LoggedIn) {
            Filter.Loading = true;
            Filter.TenantId = Model.TenantId;

            if (Filter.RecordsPerPage < 1) {
                Filter.RecordsPerPage = 10;
            }

            Filter.IncludeDeletedItems = Model.User.UserPreferences.IncludeDeletedItems;

            SaveFilter();

            var results = await Helpers.GetOrPost<DataObjects.FilterUsers>("api/Data/GetUsers", Filter);
            if (results != null) {
                Filter = results;

                Filter.Loading = false;

                RenderUserTable();

                LoadedFilter = true;

                _loading = false;

                this.StateHasChanged();

                if (Filter.ShowFilters) {
                    await Helpers.DelayedFocus("users-filter-keyword");
                }
            } else {
                Model.UnknownError();
            }
        }
    }

    protected async void NavigationCallbackHander(string action, object? o)
    {
        switch (action.ToLower()) {
            case "count":
                int recordsPerPage = -1;
                try {
                    recordsPerPage = Convert.ToInt32(o);
                } catch { }
                if(recordsPerPage > -1) {
                    Filter.RecordsPerPage = recordsPerPage;
                    await LoadFilter();
                }
                break;

            case "page":
                int page = -1;
                try {
                    page = Convert.ToInt32(o);
                } catch { }
                if(page > -1) {
                    Filter.Page = page;
                    await LoadFilter();
                }
                break;

            case "sort":
                string dataElementName = String.Empty;
                try {
                    dataElementName += Convert.ToString(o);
                } catch { }
                if (!String.IsNullOrWhiteSpace(dataElementName)) {
                    string currentSort = Helpers.StringValue(Filter.Sort);
                    string currentDirection = Helpers.StringValue(Filter.SortOrder);

                    if (currentSort.ToLower() == dataElementName.ToLower()) {
                        if(currentDirection.ToUpper() == "ASC") {
                            Filter.SortOrder = "DESC";
                        } else {
                            Filter.SortOrder = "ASC";
                        }
                    } else {
                        Filter.Sort = dataElementName;

                        if(dataElementName.ToLower() == "lastlogin") {
                            Filter.SortOrder = "DESC";
                        } else {
                            Filter.SortOrder = "ASC";
                        }
                    }
                    await LoadFilter();
                }

                break;
        }
    }

    protected void OnRecordSelected(object? record)
    {
        

        if (record != null) {
            try {
                var user = (DataObjects.User)record;
                Helpers.NavigateTo("Settings/EditUser/" + user.UserId.ToString());
            } catch { }
        }
    }

    protected void OnShowInvoices(object? record)
    {
        if(record != null) {
            Guid userId = Helpers.GetObjectPropertyValue<Guid>(record, "UserId");
            if (userId != Guid.Empty) {
                Helpers.NavigateTo("Invoices/" + userId.ToString());
            }
        }
    }

    protected async Task Refresh()
    {
        await LoadFilter();
    }

    protected void RenderUserTable()
    {
        var columns = new List<PagedRecordset.Column>();
        var updatedFilter = Helpers.UpdatePagedRecordsetColumnIcons(Filter);
        if (updatedFilter.Columns != null && updatedFilter.Columns.Any()) {
            foreach (var column in updatedFilter.Columns) {
                columns.Add(new PagedRecordset.Column {
                    Align = column.Align,
                    BooleanIcon = column.BooleanIcon,
                    Class = column.Class,
                    DataElementName = column.DataElementName,
                    DataType = column.DataType,
                    Label = column.Label,
                    Sortable = column.Sortable,
                    TipText = column.TipText,
                });
            }
        }

        _rowClasses = new List<string>();
        if (Model.User.AppAdmin) {
            // May be showing deleted items, so add the class if needed.
            if (Filter.Records != null && Filter.Records.Any()) {
                foreach (var record in Filter.Records) {
                    bool userDeleted = false;
                    bool userEnabled = false;

                    try {
                        userDeleted = Helpers.GetObjectPropertyValue<Boolean>(record, "Deleted");
                        userEnabled = Helpers.GetObjectPropertyValue<Boolean>(record, "Enabled");
                    } catch (Exception ex) {
                        if (ex != null) { }
                    }

                    if (userDeleted) {
                        _rowClasses.Add("item-deleted");
                    } else if (!userEnabled) {
                        _rowClasses.Add("disabled");
                    } else {
                        _rowClasses.Add("");
                    }
                }
            }
        }

        Data = new PagedRecordset.Recordset {
            Columns = columns,
            CurrentPage = Filter.Page,
            TotalPages = Filter.PageCount,
            TotalRecords = Filter.RecordCount,
            Records = Filter.Records,
            RecordsPerPage = Filter.RecordsPerPage,
            Sort = Filter.Sort,
            SortOrder = Filter.SortOrder,
        };
    }

    protected void SaveFilter()
    {
        // Not all properties should be saved, so make a copy and clear out values that don't need to be saved.
        DataObjects.FilterUsers saveFilter = new DataObjects.FilterUsers {
            ActionResponse = new DataObjects.BooleanResponse { Result = true },
            Admin = Filter.Admin,
            Columns = null,
            CultureCode = Filter.CultureCode,
            Enabled = Filter.Enabled,
            End = null,
            Export = null,
            ExecutionTime = 0,
            FilterDepartments = Filter.FilterDepartments,
            Keyword = Filter.Keyword,
            Loading = false,
            Page = 1,
            PageCount = 0,
            RecordCount = 0,
            Records = null,
            RecordsPerPage = Filter.RecordsPerPage,
            ShowFilters = Filter.ShowFilters,
            Sort = Filter.Sort,
            SortOrder = Filter.SortOrder,
            Start = null,
            TenantId = Filter.TenantId,
            Tenants = Filter.Tenants,
            udf01 = Filter.udf01,
            udf02 = Filter.udf02,
            udf03 = Filter.udf03,
            udf04 = Filter.udf04,
            udf05 = Filter.udf05,
            udf06 = Filter.udf06,
            udf07 = Filter.udf07,
            udf08 = Filter.udf08,
            udf09 = Filter.udf09,
            udf10 = Filter.udf10,
        };

        Model.User.UserPreferences.filterUsers = saveFilter;
    }

    protected async void SignalRUpdate(DataObjects.SignalRUpdate update)
    {
        if (update.UpdateType == DataObjects.SignalRUpdateType.User && Model.View == _pageName && update.UserId != Model.User.UserId) {
            // Update the filter if it contains the record.
            if (!Filter.Loading) {
                if(Filter.Records != null && Filter.Records.Any()) {
                    bool userInFilter = false;

                    foreach (var record in Filter.Records) {
                        try {
                            Guid UserId = Helpers.GetObjectPropertyValue<Guid>(record, "UserId");
                            if(UserId == update.ItemId) {
                                userInFilter = true;
                                break;
                            }
                        } catch (Exception ex) {
                            if (ex != null) { }
                        }
                    }

                    if (userInFilter) {
                        await LoadFilter();
                    }
                }
            }
        }
    }

    protected async Task ToggleShowFilter()
    {
        if (Filter.ShowFilters) {
            Filter.ShowFilters = false;
        } else {
            Filter.ShowFilters = true;
            await Helpers.DelayedFocus("users-filter-keyword");
        }

        SaveFilter();
    }
}
