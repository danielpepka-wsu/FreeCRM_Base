@using Blazored.LocalStorage
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager NavManager
@inject BlazorDataModel Model
@inject Radzen.DialogService DialogService
@inject Radzen.TooltipService TooltipService
<PageTitle>@Helpers.Text("AppTitle")</PageTitle>

@if (IncludeCustomCss) {
    // For clients that are using custom theme CSS and font settings that gets rendered here.
<style>
    @if(!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.ThemeFontCssImport)){
        @((MarkupString)Model.Tenant.TenantSettings.ThemeFontCssImport)
    }
    @if(!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.ThemeCss)){
        @((MarkupString)Model.Tenant.TenantSettings.ThemeCss)
    }
    @((MarkupString)IncludeCustomCssFont)
</style>
}

<div id="page-area" class="@PageAreaClass">
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasQuickAction"  aria-labelledby="offcanvasQuickActionLabel" role="dialog">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasQuickActionLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @switch (Model.QuickAction.ToLower()) {
                case "adduser":
                    <h2 class="quick-action">
                        <Language Tag="AddNewUser" IncludeIcon="true" />
                    </h2>

                    <RequiredIndicator />

                    <div class="mb-2">
                        <label for="quickadd-user-FirstName">
                            <Language Tag="FirstName" Required="true" />
                        </label>
                        <input type="text" id="quickadd-user-FirstName" class="form-control" @bind="Model.QuickAddUser.FirstName" />
                    </div>

                    <div class="mb-2">
                        <label for="quickadd-user-LastName">
                            <Language Tag="LastName" Required="true" />
                        </label>
                        <input type="text" id="quickadd-user-LastName" class="form-control" @bind="Model.QuickAddUser.LastName" />
                    </div>

                    <div class="mb-2">
                        <label for="quickadd-user-Email">
                            <Language Tag="Email" Required="true" />
                        </label>
                        <input type="text" id="quickadd-user-Email" class="form-control" @bind="Model.QuickAddUser.Email" />
                    </div>

                    <button type="button" class="btn btn-success btn-sm" @onclick="QuickAddUserSave">
                        <Language Tag="Save" IncludeIcon="true" />
                    </button>

                    <button type="button" class="btn btn-dark btn-sm" @onclick="QuickActionClose">
                        <Language Tag="Cancel" IncludeIcon="true" />
                    </button>
                    break;

                case "addusersaving":
                case "appointmentnotesaving":
                    <h2 class="quick-action">
                        <Language Tag="SavingWait" IncludeIcon="true" />
                    </h2>
                    break;

                case "appointmentnote":
                    <h2 class="quick-action">
                        <Language Tag="AppointmentNoteAdd" IncludeIcon="true" />
                    </h2>

                    <div class="mb-2">
                        <label for="quickadd-appointment-note">
                            <Language Tag="AppointmentNote" />
                        </label>
                        <textarea id="quickadd-appointment-note" rows="8" class="form-control" @bind="Model.QuickAddAppointmentNote.Note"></textarea>
                    </div>

                    <button type="button" class="btn btn-success btn-sm" @onclick="QuickAddAppointmentNoteSave">
                        <Language Tag="Save" IncludeIcon="true" />
                    </button>

                    <button type="button" class="btn btn-dark btn-sm" @onclick="QuickActionClose">
                        <Language Tag="Cancel" IncludeIcon="true" />
                    </button>
                    break;
            }
        </div>
    </div>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasUserMenu" aria-labelledby="offcanvasUserMenuLabel" role="dialog">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasUserMenuLabel"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @if (Model.LoggedIn) {
                <div class="mb-2">
                    <div class="menu-user-name">
                        <span>@Model.User.FirstName</span>
                        <span>@Model.User.LastName</span>
                    </div>
                    @if (!String.IsNullOrWhiteSpace(Model.User.Title)) {
                        <div class="menu-user-title">@Model.User.Title</div>
                    }
                    @if (!String.IsNullOrWhiteSpace(Model.User.DepartmentName)) {
                        <div class="menu-user-dept">@Model.User.DepartmentName</div>
                    }
                    <div class="menu-user-username">
                        <Language Tag="Username" TransformCase="TextCase.Lowercase" />:
                        <span>@Model.User.Username</span>
                    </div>
                    <div class="menu-user-email">
                        <Language Tag="Email" TransformCase="TextCase.Lowercase" />:
                        <span>@Model.User.Email</span>
                    </div>
                </div>

                @if (Model.Tenants != null && Model.Tenants.Count() > 1) {
                    <hr />
                    <div class="mt-2">
                        <Language Tag="SwitchAccountMessage" />
                    </div>
                    @foreach (var tenant in Model.Tenants.Where(x => x.Enabled == true).OrderBy(x => x.Name)) {
                        string tenantDisplayName = Helpers.TenantNameFromId(tenant.TenantId);

                        if (tenant.TenantId == Model.TenantId) {
                            <div class="current-tenant">
                                <Icon Name="TenantCurrent" />
                                @if(tenantDisplayName.Length > 40) {
                                    string truncatedName = tenantDisplayName.Substring(0, 18).Trim() + "..." + tenantDisplayName.Substring(tenantDisplayName.Length - 18).Trim();
                                    <span title="@tenantDisplayName">@truncatedName</span>
                                } else {
                                    <span class="icon-text">@tenantDisplayName</span>
                                }
                            </div>
                        } else {
                            <div class="pointer hover-highlight" @onclick="@(() => Helpers.SwitchTenant(tenant.TenantId))">
                                <Icon Name="TenantChange" />
                                @if(tenantDisplayName.Length > 40) {
                                    string truncatedName = tenantDisplayName.Substring(0, 18).Trim() + "..." + tenantDisplayName.Substring(tenantDisplayName.Length - 18).Trim();
                                    <span class="icon-text" title="@tenantDisplayName">@truncatedName</span>
                                } else {
                                    <span class="icon-text">@tenantDisplayName</span>
                                }
                            </div>
                        }
                    }
                }

                @if (Model.Languages.Any()) {
                    var languages = Model.Languages.Where(x => x.TenantId == Model.User.TenantId);
                    if (languages != null && languages.Count() > 1) {
                        <hr />
                        <div class="mb-2">
                            <div class="input-group mt-2">
                                <span class="input-group-text" title="@Helpers.Text("Language")">
                                    <Icon Name="Language" />
                                </span>
                                <select class="form-select language-selector" @onchange="@SetCultureCode">
                                    @foreach (var language in languages.OrderBy(x => x.Description)) {
                                        @if (language.Culture == Model.CultureCode) {
                                            <option value="@language.Culture" SELECTED>@FormatCultureCode(language)</option>
                                        } else {
                                            <option value="@language.Culture">@FormatCultureCode(language)</option>
                                        }

                                    }
                                </select>
                            </div>
                        </div>
                    }
                }
            }

            @if (Model.LoggedIn || !Model.Tenant.TenantSettings.HideAbout) {
                @if (Model.LoggedIn) {
                    <hr />
                    @if (AllowManageProfile) {
                        <div class="mb-1 pointer hover-highlight" @onclick="@(() => Helpers.NavigateTo("Profile"))">
                            <Language Tag="ManageProfile" IncludeIcon="true" />
                        </div>
                    }

                    @if (!Model.User.PreventPasswordChange)
                    {
                        <div class="mb-1 pointer hover-highlight" @onclick="@(() => Helpers.NavigateTo("ChangePassword"))">
                            <Language Tag="ChangePassword" IncludeIcon="true" />
                        </div>
                    }

                    <div class="mb-1 pointer hover-highlight" @onclick="@(() => Helpers.NavigateTo("Logout"))">
                        <Language Tag="Logout" IncludeIcon="true" />
                    </div>
                }
                <div class="mb-1 pointer hover-highlight" @onclick="@(() => Helpers.NavigateTo("About"))">
                    <Language Tag="About" IncludeIcon="true" />
                </div>
            }

            @if (!String.IsNullOrWhiteSpace(Model.Version)) {
                <hr />
                <div class="version-and-copyright">
                    v. <span>@Model.Version</span>
                    @if (Model.Released > DateOnly.FromDateTime(DateTime.MinValue)) {
                        <span> - <span>@Model.Released.ToShortDateString()</span></span>
                    }
                    @if (Model.LoggedIn && !String.IsNullOrWhiteSpace(Helpers.Text("CopyrightName"))) {
                        <div>&copy; <Language Tag="CopyrightName" /></div>
                    }

                </div>
            }
        </div>
    </div>

    @if (!Loading) {
        if(Model.AppSettings.MaintenanceMode  && !BypassMaintenanceMode){
            <div class="maintenance-mode container-fluid">
                <h1 class="page-title">
                    <Language Tag="MaintenanceMode" IncludeIcon="true" />
                </h1>
                <div class="mb-2">
                    <Language Tag="MaintenanceModeMessage" />
                </div>
            </div>
        } else {
            <header>
                <nav class="navbar fixed-top navbar-expand-lg navbar-expand-md border-bottom box-shadow mb-3">
                    <div class="container-fluid">
                        <a class="navbar-brand" href="@(Helpers.BuildUrl())">
                            @if (!String.IsNullOrWhiteSpace(LogoUrl) && Model.Tenant.TenantSettings.LogoIncludedOnNavbar) {
                                <img src="@LogoUrl" class="logo-navbar" title="@Helpers.Text("AppTitle")" />
                            } else {
                                @if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.AppIcon)) {
                                    <i>@((MarkupString)Model.Tenant.TenantSettings.AppIcon)</i>
                                }
                                <span>@Helpers.Text("AppTitle")</span>    
                            }
                        </a>
                        <button id="menu-bar-toggler" class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navBarToggler" aria-controls="navbarSupportedContent"
                                aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="navbar-collapse collapse" id="navBarToggler">
                            <ul class="navbar-nav me-auto">
                                @if (Model.LoggedIn) {
                                    if (Model.FeatureEnabledScheduling) {
                                        <li class="nav-item">
                                            <a class="@(Model.View == "schedule" ? "nav-link active" : "nav-link")" href="@(Helpers.BuildUrl("Schedule"))">
                                                <Language Tag="Schedule" IncludeIcon="true" />
                                            </a>
                                        </li>
                                    }

                                    @if (Model.FeatureEnabledInvoices){
                                        <li class="nav-item">
                                            <a class="@(new List<string>{ "invoices", "editinvoice", "createinvoice" }.Contains(Model.View) ? "nav-link active": "nav-link")" href="@(Helpers.BuildUrl("Invoices"))">
                                                <Language Tag="Invoices" IncludeIcon="true" />
                                            </a>
                                        </li>
                                    }


                                    @if (Model.User.Admin) {
                                        <li class="nav-item dropdown">
                                            <a class="@(AdminView ? "nav-link dropdown-toggle active": "nav-link dropdown-toggle")" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <Language Tag="Admin" IncludeIcon="true" />
                                            </a>
                                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                                @if (Model.User.AppAdmin) {
                                                    <li>
                                                        <a class="@(Model.View == "appsettings" ? "dropdown-item app-admin-only active" : "dropdown-item app-admin-only")" href="@(Helpers.BuildUrl("Settings/AppSettings"))">
                                                            <Language Tag="AppSettings" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.FeatureEnabledDepartments) {
                                                    <li>
                                                        <a class="@(new List<string>{ "departmentgroups", "editdepartmentgroup" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/DepartmentGroups"))">
                                                            <Language Tag="DepartmentGroups" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="@(new List<string>{ "departments", "editdepartment" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Departments"))">
                                                            <Language Tag="Departments" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.FeatureEnabledEmailTemplates) {
                                                    <li>
                                                        <a class="@(new List<string>{ "emailtemplates", "editemailtemplate" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/EmailTemplates"))">
                                                            <Language Tag="EmailTemplates" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.FeatureEnabledFiles){
                                                    <li>
                                                        <a class="@(Model.View == "files" ? "dropdown-item active" : "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Files"))">
                                                            <Language Tag="Files" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                <li>
                                                    <a class="@(Model.View == "language" ? "dropdown-item active" : "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Language"))">
                                                        <Language Tag="Language" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                @if (Model.FeatureEnabledLocation) {
                                                    <li>
                                                        <a class="@(new List<string>{ "editlocation", "locations" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Locations"))">
                                                            <Language Tag="Locations" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                <li>
                                                    <a class="@(Model.View == "settings" ? "dropdown-item active" : "dropdown-item")" href="@(Helpers.BuildUrl("Settings"))">
                                                        <Language Tag="Settings" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                @if (Model.FeatureEnabledServices) {
                                                    <li>
                                                        <a class="@(new List<string>{ "editservice", "services" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Services"))">
                                                            <Language Tag="Services" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.FeatureEnabledTags) {
                                                    <li>
                                                        <a class="@(new List<string>{ "edittag", "tags" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Tags"))">
                                                            <Language Tag="Tags" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.User.AppAdmin) {
                                                    <li>
                                                        <a class="@(new List<string>{ "edittenant", "tenants" }.Contains(Model.View) ? "dropdown-item app-admin-only active": "dropdown-item app-admin-only")" href="@(Helpers.BuildUrl("Settings/Tenants"))">
                                                            <Language Tag="Tenants" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                @if (Model.FeatureEnabledUDF){
                                                    <li>
                                                        <a class="@(Model.View == "udf" ? "dropdown-item active" : "dropdown-item")" href="@(Helpers.BuildUrl("Settings/UDF"))">
                                                            <Language Tag="UserDefinedFields" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                                <li>
                                                    <a class="@(new List<string>{ "edituser", "users" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/Users"))">
                                                        <Language Tag="Users" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                @if (Model.FeatureEnabledUserGroups) {
                                                    <li>
                                                        <a class="@(new List<string>{ "editusergroup", "usergroups" }.Contains(Model.View) ? "dropdown-item active": "dropdown-item")" href="@(Helpers.BuildUrl("Settings/UserGroups"))">
                                                            <Language Tag="UserGroups" IncludeIcon="true" />
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                }
                            </ul>
                            <form class="d-flex">
                                <ul class="navbar-nav me-auto">
                                    @if (Model.HaveDeletedRecords) {
                                        <li class="nav-item">
                                            <a class="nav-link deleted-records" role="button" href="@(Helpers.BuildUrl("Settings/DeletedRecords"))" title="@Helpers.Text("PendingDeletedRecords")">
                                                <Icon Name="DeletedRecords" />
                                            </a>
                                        </li>
                                    }

                                    @if (String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.Theme)) {
                                        <li class="nav-item dropdown" title="@Helpers.Text("Theme")">
                                            <a class="nav-link dropdown-toggle" href="#" id="themeDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                @switch (Model.Theme) {
                                                    case "dark":
                                                        <Icon Name="ThemeDark" />
                                                        break;

                                                    case "light":
                                                        <Icon Name="ThemeLight" />
                                                        break;

                                                    case "auto":
                                                        <Icon Name="ThemeAuto" />
                                                        break;
                                                }
                                            </a>
                                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="themeDropdown">
                                                <li>
                                                    <a class="dropdown-item disabled" href="javascript:void('0');">
                                                        <Language Tag="Theme" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item" href="javascript:void('0');" @onclick="@(() => SetTheme("auto"))">
                                                        <Language Tag="ThemeAuto" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="javascript:void('0');" @onclick="@(() => SetTheme("light"))">
                                                        <Language Tag="ThemeLight" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="javascript:void('0');" @onclick="@(() => SetTheme("dark"))">
                                                        <Language Tag="ThemeDark" IncludeIcon="true" />
                                                    </a>
                                                </li>
                                            </ul>
                                        </li>
                                    }
                                    <li class="nav-item">
                                        <a class="nav-link" data-bs-toggle="offcanvas" href="#offcanvasUserMenu" role="button" aria-controls="offcanvasUserMenu">
                                            @if (Model.LoggedIn) {
                                                @if (!String.IsNullOrWhiteSpace(UserAvatarUrl)) {
                                                    <img class="user-menu-icon" src="@UserAvatarUrl" />
                                                } else {
                                                    <Icon Name="User" />
                                                }
                                            } else {
                                                <Icon Name="Info" />
                                            }
                                        </a>
                                    </li>
                                </ul>
                            </form>
                        </div>
                    </div>
                </nav>
            </header>

            @if (!Model.AppOnline){
                <div class="container-fluid">
                    <div role="alert" class="alert alert-danger">
                        <Language Tag="ServerOffline" />
                    </div>
                </div>
            }

            @if (Model.Messages.Any()) {
                <div aria-live="polite" aria-atomic="true" class="position-relative">
                    <div class="toast-container end-0" id="toast-message-area">
                        @foreach (var message in Model.Messages.OrderByDescending(x => x.Shown)) {
                            string text = message.Text;

                            string toastClass = "toast show ";
                            string toastCloseButtonClass = "btn-close me-2 mt-2 m-auto";

                            switch (message.MessageType) {
                                case MessageType.Primary:
                                    toastClass += "text-bg-primary";
                                    toastCloseButtonClass += " btn-close-white";
                                    break;

                                case MessageType.Secondary:
                                    toastClass += "text-bg-secondary";
                                    toastCloseButtonClass += " btn-close-white";
                                    break;

                                case MessageType.Success:
                                    toastClass += "text-bg-success";
                                    toastCloseButtonClass += " btn-close-white";
                                    break;

                                case MessageType.Danger:
                                    toastClass += "text-bg-danger";
                                    toastCloseButtonClass += " btn-close-white";
                                    break;

                                case MessageType.Warning:
                                    toastClass += "text-bg-warning";
                                    toastCloseButtonClass += " btn-close-black";
                                    break;

                                case MessageType.Info:
                                    toastClass += "text-bg-info";
                                    toastCloseButtonClass += " btn-close-black";
                                    break;

                                case MessageType.Light:
                                    toastClass += "text-bg-light";
                                    toastCloseButtonClass += " btn-close-black";
                                    break;

                                case MessageType.Dark:
                                    toastClass += "text-bg-dark";
                                    toastCloseButtonClass += " btn-close-white";
                                    break;
                            }

                            if (message.ReplaceLineBreaks) {
                                text = text.Replace(Environment.NewLine, "<br />");
                            }

                            <div class="@toastClass" role="alert" aria-live="assertive" aria-atomic="true" id="@message.Id" data-bs-animation="false">
                                <div class="d-flex">
                                    <div class="toast-body">
                                        @if (!message.AutoHide) {
                                            <div id="toast-time-@message.Id" class="toast-time">@message.TimeLabel</div>
                                        }
                                        <div>@((MarkupString)text)</div>
                                    </div>
                                    <button type="button" class="@toastCloseButtonClass" @onclick="@(() => CloseMessage(message.Id))"
                                            aria-label="@Helpers.Text("Close")"></button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    } else {
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    }

    <div class="container-fluid page-view">
        @if (Model.AppSettings.MaintenanceMode && (Model.User.AppAdmin || BypassMaintenanceMode)) {
            <div class="alert alert-danger">
                <h1 class="page-title">
                    <Language Tag="MaintenanceMode" IncludeIcon="true" />
                </h1>
                <div class="mb-2">
                    <Language Tag="MaintenanceModeAppAdminMessage" />
                </div>
            </div>
        }

        @if (!Loading && (!Model.AppSettings.MaintenanceMode || Model.User.AppAdmin || BypassMaintenanceMode)) {
            if (Model.ViewIsEditPage && Model.UsersOnSamePage.Any()) {
                <div id="users-on-same-page" class="alert alert-danger">
                    <h2 class="subtitle">
                        <Language Tag="UsersOnSamePage" />
                    </h2>

                    <div class="mb-2">
                        <Language Tag="UsersOnSamePageMessage" />
                    </div>

                    <table class="padded">
                        <tbody>
                        @foreach (var user in Model.UsersOnSamePage.OrderBy(x => x.FirstName).ThenBy(x => x.LastName)) {
                            string icon = Helpers.UserIcon(user.Photo);
                            <tr>
                                <td>@((MarkupString)icon)</td>
                                <td>@user.FirstName @user.LastName</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }

            <div class="pb-3">@Body</div>
        }
    </div>

    <div id="password-generator" style="display:none;"> </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<RadzenDialog />
<RadzenTooltip/>

@code {
    private bool hubConfigured = false;
    private HubConnection? hubConnection;

    protected bool DeletedRecordCountsLoaded = false;
    protected bool FirstRun = true;
    protected string LastUserPreferencesJson = String.Empty;
    protected bool Loading = true;
    protected bool StartupValidated = false;
    protected System.Threading.Timer? timer;
    protected System.Threading.Timer? updateTimer;
    protected bool Validating = false;
    protected DataObjects.VersionInfo versionInfo = new DataObjects.VersionInfo();
    protected bool versionInfoLoaded = false;

    protected DotNetObjectReference<MainLayout>? dotNetHelper;

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!Model.Subscribers_OnChange.Contains("MainLayout")){
            Model.Subscribers_OnChange.Add("MainLayout");
            Model.OnChange += StateHasChanged;
        }

        NavManager.LocationChanged += LocationChanged;

        if (!Helpers.Initialized) {
            Helpers.Init(jsRuntime, Model, Http, LocalStorage, DialogService, TooltipService, NavManager);

            List<string>? globallyDisabledModules = await Helpers.GetOrPost<List<string>>("api/Data/GetGloballyDisabledModules");
            Model.GloballyDisabledModules = globallyDisabledModules;
        }

        if (String.IsNullOrWhiteSpace(Model.Fingerprint)) {
            await Helpers.GetFingerprint();
        }

        if (!Model.LoggedIn && StartupValidated) {
            await ValidateLogin();
        }

        timer = new System.Threading.Timer(async (object? stateInfo) => {
            await ThemeWatcher();
            MessageWatcher();
            await SavePendingUserPreferences();
        }, new System.Threading.AutoResetEvent(false), 0, 500);

        updateTimer = new System.Threading.Timer(async (object? stateInfo) => {
            await CheckForUpdates();
        }, new System.Threading.AutoResetEvent(false), 0, 10000);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            dotNetHelper = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("SetDotNetHelper", dotNetHelper);

            // See if a Theme is stored.
            var theme = await LocalStorage.GetItemAsync<string>("Theme");
            if (String.IsNullOrWhiteSpace(theme)) {
                theme = "light";
            }
            SetTheme(theme);

            await ValidateStartupState();
            StartupValidated = true;

            await Helpers.LoadDefaultLanguage();

            await jsRuntime.InvokeVoidAsync("Loaded");

            StateHasChanged();
        } else {
            if (!Validating && !Model.LoggedIn && Model.Loaded && StartupValidated) {
                await ValidateLogin();
            }

            if(!Validating && Model.LoggedIn && StartupValidated && Model.User.Admin && !DeletedRecordCountsLoaded) {
                DeletedRecordCountsLoaded = true;
                await Helpers.GetDeletedRecordCount();
                StateHasChanged();
            }
        }

        Loading = false;

        if(Model.Loaded) {
            if(!hubConfigured){
                hubConfigured = true;

                hubConnection = new HubConnectionBuilder()
                    .WithUrl(Model.ApplicationUrl + "FileGpthub")
                    .WithStatefulReconnect()
                    .WithAutomaticReconnect()
                    .Build();

                hubConnection.On<DataObjects.SignalRUpdate>("SignalRUpdate", async(update) => {
                    await ProcessSignalRUpdate(update);
                });

                await hubConnection.StartAsync();

                await hubConnection.InvokeAsync("JoinTenantId", Model.TenantId);
            }

            if(!versionInfoLoaded) {
                var info = await Helpers.GetOrPost<DataObjects.VersionInfo>("api/Data/GetVersionInfo");
                if(info != null) {
                    versionInfo = info;
                    versionInfoLoaded = true;
                }
            }
        }
    }

    [JSInvokable]
    public void DotNetHelperHandler(params string[] arguments){
        if (arguments != null){
            Model.DotNetHelperHandler(arguments.ToList());
        }
    }

    protected bool AdminView
    {
        get {
            bool output = false;

            switch (Model.View) {
                case "appsettings":
                case "editdepartment":
                case "editdepartmentgroup":
                case "editlocation":
                case "editservice":
                case "edittag":
                case "edittenant":
                case "edituser":
                case "editusergroup":
                case "departmentgroups":
                case "departments":
                case "files":
                case "language":
                case "locations":
                case "services":
                case "settings":
                case "tags":
                case "tenants":
                case "udf":
                case "users":
                case "usergroups":
                    output = true;
                    break;
            }

            return output;
        }
    }

    protected bool AllowManageProfile
    {
        get {
            bool output = false;

            if(Model.Tenant.TenantSettings.AllowUsersToManageAvatars || Model.Tenant.TenantSettings.AllowUsersToManageBasicProfileInfo) {
                output = true;
            }

            return output;
        }
    }

    protected bool BypassMaintenanceMode
    {
        get {
            bool output = false;

            if(Model.User.AppAdmin) {
                output = true;
            }else if (Model.View == "login" && !String.IsNullOrWhiteSpace(Model.TenantCodeFromUrl) && Model.TenantCodeFromUrl.ToLower() == "admin") {
                // Allow logging in to the Admin tenant
                output = true;
            }

            return output;
        }
    }

    protected async Task CheckForUpdates()
    {
        if (versionInfoLoaded) {
            bool reload = false;
            bool wasOnline = Model.AppOnline;

            var info = await Helpers.GetOrPost<DataObjects.VersionInfo>("api/Data/GetVersionInfo");

            if(info != null){
                if (!String.IsNullOrWhiteSpace(info.Version)) {
                    Model.AppOnline = true;
                }

                if(versionInfo.Released != info.Released || versionInfo.RunningSince != info.RunningSince || versionInfo.Version != info.Version) {
                    reload = true;
                }

                if (reload) {
                    var uri = Helpers.ToAbsoluteUri(Helpers.Uri);
                    string redirect = uri.ToString();

                    if(!String.IsNullOrWhiteSpace(redirect)){
                        if (redirect.ToLower().Contains("serverupdated")){
                            // Already in the process of redirecting
                        } else {
                            Helpers.NavigateTo("ServerUpdated?Redirect=" + Helpers.UrlEncode(redirect));    
                        }
                    }else{
                        Helpers.NavigateToRoot();
                    }
                }
            } else {
                // Server is offline
                Model.AppOnline = false;
                await Helpers.HideMenus();
                StateHasChanged();
            }

            if(wasOnline != Model.AppOnline) {
                if (Model.AppOnline) {
                    updateTimer?.Change(0, 10000);
                } else {
                    updateTimer?.Change(0, 2000);        
                }
            }
        }
    }

    protected void CloseMessage(string messageId)
    {
        Model.Messages = Model.Messages.Where(x => x.Id != messageId).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null) {
            await hubConnection.DisposeAsync();
        }
    }

    protected string FormatCultureCode(DataObjects.Language language)
    {
        string output = language.Description + " [" + language.Culture + "]";
        return output;
    }

    protected bool IncludeCustomCss
    {
        get {
            bool output = false;

            if(Model.Tenant.TenantSettings.Theme == "custom") {
                output = true;
            } else if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.ThemeFontCssImport)) {
                output = true;
            } else if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.ThemeFont)) {
                output = true;
            }

            return output;
        }
    }

    protected string IncludeCustomCssFont
    {
        get {
            string output = String.Empty;

            if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.ThemeFont)) {
                output = "html, body {" + Environment.NewLine +
                    "  font-family: " + Model.Tenant.TenantSettings.ThemeFont + ";" + Environment.NewLine +
                    "}";
            }

            return output;
        }
    }

    public bool IsSignalRConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Remove any messages
        Model.Messages = new List<Message>();
        Model.NavigationId = "";
        Model.ViewIsEditPage = false;

        bool reloadDeleteCounts = Model.User.Admin && Model.Tenant.TenantSettings.DeletePreference == DataObjects.DeletePreference.MarkAsDeleted;

        base.InvokeAsync(async () => {
            await Helpers.HideMenus();
            if (reloadDeleteCounts) {
                await Helpers.GetDeletedRecordCount();
            }
        });
    }

    protected string LogoUrl
    {
        get {
            string output = "";

            if (Model.Tenant.TenantSettings.Logo.HasValue && Model.Tenant.TenantSettings.Logo != Guid.Empty) {
                output = Helpers.BaseUri + "File/View/" + ((Guid)Model.Tenant.TenantSettings.Logo).ToString();
            }

            return output;
        }
    }

    protected void MessageWatcher()
    {
        if (Model.Messages.Any()) {
            int maxMessages = Model.Tenant.TenantSettings.MaxToastMessages;
            int totalPersistentMessages = 0;

            List<string> remove = new List<string>();

            // Iterate over all messages.
            // If any messages are auto-hide then hide them after 5 seconds.
            // Otherwise, after the 5 seconds show the time the message has been displayed.
            DateTime now = DateTime.UtcNow;
            foreach (var message in Model.Messages.OrderByDescending(x => x.Shown)) {
                var secondsAgo = (now - message.Shown).TotalSeconds;

                if (secondsAgo >= 5) {
                    if (message.AutoHide) {
                        remove.Add(message.Id);
                    } else {
                        message.TimeLabel = Helpers.SecondsToTimePassed(secondsAgo);
                    }
                }

                if (maxMessages > 0 && !message.AutoHide) {
                    totalPersistentMessages++;
                    if (totalPersistentMessages > maxMessages) {
                        remove.Add(message.Id);
                    }
                }
            }

            Model.Messages = Model.Messages.Where(x => !remove.Contains(x.Id)).ToList();
        }
    }

    protected string PageAreaClass
    {
        get
        {
            string output = "";

            if(Model.AppSettings.MaintenanceMode && !BypassMaintenanceMode) {
                output += "maintenance-mode";
            }

            return output;
        }
    }

    protected async Task ProcessSignalRUpdate(DataObjects.SignalRUpdate update)
    {
        if(update != null && (update.TenantId == null || update.TenantId == Model.TenantId)) {
            var itemId = update.ItemId;
            string message = update.Message.ToLower();
            var userId = update.UserId;

            switch (update.UpdateType) {
                case DataObjects.SignalRUpdateType.Appointment:
                    var appt = Helpers.DeserializeObject<DataObjects.Appointment>(update.ObjectAsString);
                    break;

                case DataObjects.SignalRUpdateType.Department:
                    await Helpers.LoadDepartments();
                    break;

                case DataObjects.SignalRUpdateType.DepartmentGroup:
                    break;

                case DataObjects.SignalRUpdateType.EmailTemplate:
                    var emailTemplate = Helpers.DeserializeObject<DataObjects.EmailTemplate>(update.ObjectAsString);
                    break;

                case DataObjects.SignalRUpdateType.File:
                    var file = Helpers.DeserializeObject<DataObjects.FileStorage>(update.ObjectAsString);
                    break;

                case DataObjects.SignalRUpdateType.Language:
                    if(userId != Model.User.UserId){
                        await Helpers.ReloadModel();
                    }
                    break;

                case DataObjects.SignalRUpdateType.LastAccessTime:
                    // Update the users last access time in the ActiveUsers list.
                    var activeUserItem = Model.ActiveUsers.FirstOrDefault(x => x.UserId == userId);
                    if(activeUserItem != null) {
                        activeUserItem.LastAccess = DateTime.UtcNow;
                        StateHasChanged();
                    }
                    break;

                case DataObjects.SignalRUpdateType.Location:
                    await Helpers.LoadLocations();
                    break;

                case DataObjects.SignalRUpdateType.Service:
                    await Helpers.LoadServices();
                    break;

                case DataObjects.SignalRUpdateType.Setting:
                    switch (message) {
                        case "applicationsettingsupdate":
                            var appSettings = Helpers.DeserializeObject<DataObjects.ApplicationSettingsUpdate>(update.ObjectAsString);
                            if(appSettings != null) {
                                Model.AppSettings = appSettings;

                                if(Model.ApplicationUrl != appSettings.ApplicationURL && !String.IsNullOrWhiteSpace(appSettings.ApplicationURL)) {
                                    Model.ApplicationUrl = appSettings.ApplicationURL;
                                }

                                if(Model.ShowTenantListingWhenMissingTenantCode != appSettings.ShowTenantListingWhenMissingTenantCode) {
                                    Model.ShowTenantListingWhenMissingTenantCode = appSettings.ShowTenantListingWhenMissingTenantCode;
                                }

                                if(Model.UseTenantCodeInUrl != appSettings.UseTenantCodeInUrl) {
                                    Model.UseTenantCodeInUrl = appSettings.UseTenantCodeInUrl;

                                    Helpers.NavigateToRoot(true);
                                }
                            }
                            break;

                        default:
                            if(userId != Model.User.UserId) {
                                await Helpers.ReloadModel();
                            }
                            break;
                    }
                    break;

                case DataObjects.SignalRUpdateType.Tag:
                    await Helpers.LoadTags();
                    break;

                case DataObjects.SignalRUpdateType.Tenant:
                    switch (message) {
                        case "deleted":
                            if(itemId == Model.TenantId) {
                                // The current tenant was deleted, so log any users out that are logged in to this tenant.
                                Helpers.NavigateTo("Logout");
                            } else {
                                // Not the current tenant, but if this user has this tenant in their list then reload the model.
                                if(Model.Tenants.Any(x => x.TenantId == update.TenantId)) {
                                    await Helpers.ReloadModel();
                                    StateHasChanged();
                                }
                            }
                            break;

                        case "saved":
                            if(Model.Tenants.Any(x => x.TenantId == update.TenantId)){
                                await Helpers.ReloadModel();
                                StateHasChanged();
                            }
                            break;
                    }
                    break;

                case DataObjects.SignalRUpdateType.UDF:
                    break;

                case DataObjects.SignalRUpdateType.Unknown:
                    await Helpers.ConsoleLog("Unknown SignalR Update Type Received");
                    break;

                case DataObjects.SignalRUpdateType.User:
                    var user = Helpers.DeserializeObject<DataObjects.User>(update.ObjectAsString);
                    if(user != null) {
                        var existingUser = Model.Users.FirstOrDefault(x => x.UserId == user.UserId);
                        if(existingUser != null) {
                            existingUser = user;
                        }else {
                            Model.Users.Add(user);
                        }

                        if(Model.User.UserId == user.UserId) {
                            Model.User = user;

                            if (!user.Enabled) {
                                // This user has been disabled, so log them out.
                                Helpers.NavigateTo("Logout");
                            }
                        }
                    }

                    if(itemId == Model.User.UserId) {
                        switch (message) {
                            case "deleteduserphoto":
                                Model.User.Photo = null;
                                StateHasChanged();
                                break;

                            case "saveduserphoto":
                                await Helpers.ReloadUser();
                                StateHasChanged();
                                break;
                        }
                    }
                    break;

                case DataObjects.SignalRUpdateType.UserGroup:
                    await Helpers.LoadUserGroups();
                    break;

                case DataObjects.SignalRUpdateType.UserPreferences:
                    var userPreferences = Helpers.DeserializeObject<DataObjects.UserPreferences>(update.ObjectAsString);
                    if(userPreferences != null) {
                        // Update the item in the ActiveUsers list.
                        var activeUserItem2 = Model.ActiveUsers.FirstOrDefault(x => x.UserId == userId);
                        if(activeUserItem2 != null) {
                            activeUserItem2.UserPreferences = userPreferences;
                            activeUserItem2.LastAccess = DateTime.UtcNow;
                        } else {
                            // This user is not in the ActiveUsers list, so load the record.
                            await Helpers.LoadActiveUser(userId);
                        }
                        StateHasChanged();
                    }
                    break;

                default:
                    await Helpers.ConsoleLog("Unknown SignalR Update Type Received");
                    break;
            }

            // Also trigger the update in the model.
            Model.SignalRUpdate(update);
        }
    }

    protected async Task QuickActionClose()
    {
        await Helpers.HideMenus();
    }

    protected async Task QuickAddAppointmentNoteSave()
    {
        string focus = String.Empty;

        if (String.IsNullOrWhiteSpace(Model.QuickAddAppointmentNote.Note)) {
            focus = "quickadd-appointment-note";
        }

        if(focus != String.Empty) {
            await Helpers.DelayedFocus(focus);
            return;
        }

        Model.QuickAction = "appointmentnotesaving";

        var saved = await Helpers.GetOrPost<DataObjects.AppointmentNote>("api/Data/SaveAppointmentNote", Model.QuickAddAppointmentNote);

        await Helpers.HideMenus();

        if(saved != null) {
            if (saved.ActionResponse.Result) {
                Model.AddMessage(Helpers.Text("AppointmentNoteCreated"), MessageType.Success);
                if(Model.QuickActionOnComplete != null) {
                    Model.QuickActionOnComplete.DynamicInvoke(saved);
                }
            } else {
                Model.ErrorMessages(saved.ActionResponse.Messages);
            }
        } else {
            Model.UnknownError();
        }
    }

    protected async Task QuickAddUserSave()
    {
        string focus = String.Empty;

        if (String.IsNullOrWhiteSpace(Model.QuickAddUser.FirstName)) {
            if (focus == String.Empty) { focus = "quickadd-user-FirstName"; }
        }
        if (String.IsNullOrWhiteSpace(Model.QuickAddUser.LastName)) {
            if (focus == String.Empty) { focus = "quickadd-user-LastName"; }
        }
        if (String.IsNullOrWhiteSpace(Model.QuickAddUser.Email)) {
            if (focus == String.Empty) { focus = "quickadd-user-Email"; }
        }

        if(focus != String.Empty) {
            await Helpers.DelayedFocus(focus);
            return;
        }

        Model.QuickAction = "addusersaving";

        var saved = await Helpers.GetOrPost<DataObjects.User>("api/Data/SaveUser", Model.QuickAddUser);

        await Helpers.HideMenus();

        if(saved != null) {
            if (saved.ActionResponse.Result) {
                await Helpers.ReloadTenantUsers();

                if(Model.QuickActionOnComplete != null) {
                    Model.QuickActionOnComplete.DynamicInvoke(saved);
                }

                Model.AddMessage(Helpers.Text("NewUserCreated"), MessageType.Success);
            } else {
                Model.ErrorMessages(saved.ActionResponse.Messages);
            }
        } else {
            Model.UnknownError();
        }
    }

    protected async Task SavePendingUserPreferences()
    {
        if (Model.LoggedIn) {
            string json = Helpers.SerializeObject(Model.User.UserPreferences);

            if(LastUserPreferencesJson != json) {
                // Initially, the LastUserPreferencesJson will be empty. Don't save on that initial load of the object.
                if (!String.IsNullOrEmpty(LastUserPreferencesJson)) {
                    await Helpers.SaveUserPreferences();
                }

                LastUserPreferencesJson = json;
            }
        }
    }

    protected async Task SetCultureCode(ChangeEventArgs e)
    {
        string cultureCode = String.Empty;
        try {
            if (e.Value != null) {
                cultureCode += e.Value.ToString();
            }
        }
        catch { }

        if (!String.IsNullOrWhiteSpace(cultureCode)) {
            await LocalStorage.SetItemAsync("CultureCode", cultureCode);
            Model.CultureCode = cultureCode;

            var lang = Model.Languages.FirstOrDefault(x => x.TenantId == Model.TenantId && x.Culture.ToLower() == cultureCode.ToLower());
            if (lang != null) {
                Model.Language = lang;
            } else {
                Model.Language = Model.DefaultLanguage;
            }

            Helpers.ForceModelUpdates();
        }
    }

    [JSInvokable]
    public void SetFingerprint(string fingerprint)
    {
        Model.Fingerprint = fingerprint;
    }

    protected async void SetTheme(string theme)
    {
        Model.Theme = theme;
        await jsRuntime.InvokeVoidAsync("SetPreferredColorScheme", theme);
        await LocalStorage.SetItemAsync("Theme", theme);
    }

    protected async Task ThemeWatcher()
    {
        string theme = Model.Theme;

        if(!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.Theme)) {
            theme = Model.Tenant.TenantSettings.Theme; 
        }

        await jsRuntime.InvokeVoidAsync("SetPreferredColorScheme", theme);
    }

    protected string UserAvatarUrl
    {
        get {
            string output = "";

            if (Model.User.Photo.HasValue && Model.User.Photo != Guid.Empty) {
                output = Helpers.BaseUri + "File/View/" + ((Guid)Model.User.Photo).ToString();// + "?Random=" + Guid.NewGuid().ToString();
            }

            return output;
        }
    }

    protected async Task ValidateLogin()
    {
        if (!Validating) {
            Validating = true;

            if(Model.User.ActionResponse.Result){
                if (!Model.LoggedIn) {
                    await Helpers.ReloadModel();
                }

                Validating = false;
                return;
            }

            var currentUser = await Helpers.GetCurrentUser();
            if (currentUser.ActionResponse.Result) {
                Model.User = currentUser;
            }

            if (Model.User.ActionResponse.Result) {
                Model.TenantId = Model.User.TenantId;

                string token = "";
                // Check the cookie first
                var cookieToken = await Helpers.CookieRead<string>("user-token");
                if (!String.IsNullOrWhiteSpace(cookieToken)) {
                    token = cookieToken;
                }

                if (String.IsNullOrWhiteSpace(token) && !String.IsNullOrWhiteSpace(Model.User.AuthToken)) {
                    token = Model.User.AuthToken;
                }

                Model.User.AuthToken = token;

                // Get or update the Session Data
                if (!Model.LoggedIn || !Model.Tenants.Any()) {
                    await Helpers.ReloadModel();
                    hubConfigured = false;
                }
            } else {
                // Load the models but with just basic info
                if (!Model.Loaded) {
                    await Helpers.ReloadModel();

                    var url = Helpers.Uri;
                    if (!String.IsNullOrWhiteSpace(url)) {
                        bool allowAnonymousAccess = false;

                        string pagename = String.Empty;
                        if (url.Contains("/")) {
                            pagename = url.Substring(url.LastIndexOf("/") + 1);
                        }

                        if (pagename.Contains("?")) {
                            pagename = pagename.Substring(0, pagename.IndexOf("?"));
                        }

                        if (url.ToLower().Contains("/authorization/")) {
                            allowAnonymousAccess = true;
                        }

                        if (!allowAnonymousAccess) {
                            if (!String.IsNullOrWhiteSpace(pagename)) {
                                if (!allowAnonymousAccess) {
                                    switch (pagename.ToUpper()) {
                                        case "ABOUT":
                                        case "DATABASEOFFLINE":
                                        case "LOGIN":
                                        case "LOGOUT":
                                        case "PROCESSLOGIN":
                                        case "SETUP":
                                            allowAnonymousAccess = true;
                                            break;
                                    }
                                }
                            }
                        }

                        if (!allowAnonymousAccess) {
                            var requestedUrl = Helpers.Uri;
                            var baseUrl = Helpers.BaseUri;

                            if(requestedUrl != baseUrl) {
                                await Helpers.CookieWrite("requested-url", requestedUrl);
                            }

                            Helpers.NavigateTo("Login");
                        }
                    }
                }
            }

            Validating = false;
        }
    }

    protected async Task ValidateStartupState()
    {
        bool redirected = false;

        DataObjects.SimplePost post = new DataObjects.SimplePost {
            SingleItem = Helpers.BaseUri,    
        };

        //var response = await Http.GetAsync("api/Data/GetStartupState", post);
        var response = await Http.PostAsJsonAsync("api/Data/GetStartupState", post);
        if(response != null && response.IsSuccessStatusCode) {
            var startupState = await response.Content.ReadFromJsonAsync<DataObjects.BooleanResponse>();
            if(startupState != null) {
                if (startupState.Messages.Any()) {
                    bool firstMessage = true;
                    string message = String.Empty;
                    Model.StartupErrors = new List<string>();

                    foreach(var msg in startupState.Messages) {
                        if (firstMessage) {
                            message = startupState.Messages[0];
                            firstMessage = false;
                        } else {
                            Model.StartupErrors.Add(msg);
                        }
                    }

                    switch (message.ToUpper()) {
                        case "DATABASEOFFLINE":
                            Helpers.NavigateTo("DatabaseOffline");
                            redirected = true;
                            break;

                        case "MISSINGCONNECTIONSTRING":
                            Helpers.NavigateTo("Setup");
                            redirected = true;
                            break;
                    }
                }
            }
        }

        if (!redirected) {
            Model.StartupValidated = true;
            await ValidateLogin();
        }
    }
}