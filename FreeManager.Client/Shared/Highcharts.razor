@implements IDisposable
@using System.ComponentModel
@inject Microsoft.JSInterop.IJSRuntime jsRuntime

<style>
</style>

@code {
    // To use this library you must have already loaded the required highcharts javascript library files
    // in your application. Example:
    // <script src="https://code.highcharts.com/highcharts.js"></script>
    // <script src="https://code.highcharts.com/modules/exporting.js"></script>
    //
    // This control currently only supports a few of the chart types we use.

    [Parameter]
    public string? ChartSubtitle { get; set; }

    [Parameter]
    public string? ChartTitle { get; set; }

    [Parameter]
    public ChartTypes? ChartType { get; set; }

    [Parameter]
    public string? ElementId { get; set; }

    [Parameter]
    public Delegate? OnItemClicked { get; set; }

    [Parameter]
    public string? yAxisText { get; set; }

    [Parameter]
    public string[]? SeriesCategories { get; set; }

    [Parameter]
    public SeriesData[]? SeriesDataItems { get; set; }

    [Parameter]
    public SeriesDataArray[]? SeriesDataArrayItems { get; set; }

    [Parameter]
    public Func<int, string>? TooltipCallbackHandler { get; set; }

    protected bool _chartRendered = false;
    protected string _chartSubtitle = "";
    protected string _chartTitle = "";
    protected string _elementId = "";
    protected bool _highchartsResourcesLoaded = false;
    protected string _seriesData = "";
    protected string _yAxisText = "";

    protected IJSObjectReference? jsModule;
    protected DotNetObjectReference<Highcharts>? dotNetHelper;

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            dotNetHelper = DotNetObjectReference.Create(this);

            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./Shared/Highcharts.Razor.js?v=" + Guid.NewGuid().ToString().Replace("-", ""));

            await jsModule.InvokeVoidAsync("SetDotNetHelper", dotNetHelper);

            // Call the method to make sure the Highcharts javascript libraries have been loaded.
            // That javascript method will call OnHighchartsLoaded if they are already loaded or after loading.
            await jsModule.InvokeVoidAsync("LoadHighchartsResources");
        }
    }

    [JSInvokable]
    public async Task OnHighchartsLoaded()
    {
        if (!_highchartsResourcesLoaded) {
            _highchartsResourcesLoaded = true;
            await RenderChart();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        bool valuesChanged = false;

        string chartSubtitle = !String.IsNullOrWhiteSpace(ChartSubtitle) ? ChartSubtitle : "";
        if(_chartSubtitle != chartSubtitle) {
            _chartSubtitle = chartSubtitle;
            valuesChanged = true;
        }

        string chartTitle = !String.IsNullOrWhiteSpace(ChartTitle) ? ChartTitle : "";
        if (_chartTitle != chartTitle) {
            _chartTitle = chartTitle;
            valuesChanged = true;
        }

        string elementId = !String.IsNullOrWhiteSpace(ElementId) ? ElementId : "";
        if(_elementId != elementId) {
            _elementId = elementId;
            valuesChanged = true;
        }

        string yAxisTextValue = !String.IsNullOrWhiteSpace(yAxisText) ? yAxisText : "";
        if (_yAxisText != yAxisTextValue) {
            _yAxisText = yAxisTextValue;
            valuesChanged = true;
        }

        if (String.IsNullOrWhiteSpace(_elementId)) {
            await Helpers.ConsoleLog("Missing the Required Parameter ElementId");
            return;
        }

        string seriesData = "";

        if(ChartType != null) {
            switch (ChartType) {
                case ChartTypes.Column:
                    seriesData = Helpers.SerializeObject(SeriesDataArrayItems);
                    break;

                case ChartTypes.Pie:
                    seriesData = Helpers.SerializeObject(SeriesDataItems);
                    break;
            }
        }

        if(_seriesData != seriesData) {
            _seriesData = seriesData;
            valuesChanged = true;
        }

        if (valuesChanged && _highchartsResourcesLoaded) {
            await RenderChart();
        }
    }

    protected async Task RenderChart()
    {
        if (!_highchartsResourcesLoaded) {
            return;
        }

        if (ChartType != null) {
            switch (ChartType) {
                case ChartTypes.Column:
                    await ChartRender_Column();
                    break;

                case ChartTypes.Pie:
                    await ChartRender_Pie();
                    break;
            }
        } else {
            await Helpers.ConsoleLog("Missing the Required Parameter ChartType");
        }
    }

    [JSInvokable]
    public void ChartItemClicked(int index)
    {
        if (OnItemClicked != null) {
            OnItemClicked.DynamicInvoke(index);
        }
    }

    protected async Task ChartRender_Column()
    {
        if (SeriesCategories == null || SeriesCategories.Length == 0) {
            await Helpers.ConsoleLog("Missing Required Parameter SeriesCategories");
            return;
        }

        if(SeriesDataArrayItems == null || SeriesDataArrayItems.Length == 0) {
            await Helpers.ConsoleLog("Missing Required Parameter SeriesDataArrayItems");
            return;
        }

        if(jsModule != null) {
            _chartRendered = true;
            await jsModule.InvokeVoidAsync("RenderChart_Column", _elementId, _chartTitle, _chartSubtitle, _yAxisText, SeriesCategories, SeriesDataArrayItems);
        }
    }

    protected async Task ChartRender_Pie()
    {
        if (SeriesDataItems == null || SeriesDataItems.Length == 0) {
            await Helpers.ConsoleLog("Missing Required Parameter SeriesDataItems");
            return;
        }

        FormatDefaultTooltips();

        if (jsModule != null) {
            _chartRendered = true;
            await jsModule.InvokeVoidAsync("RenderChart_Pie", _elementId, _chartTitle, _chartSubtitle, SeriesDataItems);
        }
    }

    protected void FormatDefaultTooltips()
    {
        if(SeriesDataItems != null && SeriesDataItems.Any()) {
            foreach(var item in SeriesDataItems) {
                if (String.IsNullOrWhiteSpace(item.tooltip)) {
                    item.tooltip = item.name + ": " + item.data.ToString();
                }
            }
        }
    }

    public enum ChartTypes
    {
        Column,
        Pie,
    }

    public class SeriesData
    {
        public string name { get; set; } = "";
        public decimal data { get; set; }
        public string tooltip { get; set; } = "";
    }

    public class SeriesDataArray
    {
        public string name { get; set; } = "";
        public decimal[] data { get; set; } = [];
    }
}
