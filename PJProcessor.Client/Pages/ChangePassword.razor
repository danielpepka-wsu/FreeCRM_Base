@page "/ChangePassword"
@page "/{TenantCode}/ChangePassword"
@implements IDisposable
@using Blazored.LocalStorage
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject BlazorDataModel Model
@if (Model.Loaded && Model.View == _pageName) {
    <h1 class="page-title">
        <Language Tag="ChangePassword" IncludeIcon="true" />
    </h1>

    @if (processing) {
        <div class="mb-2"><Language Tag="ProcessingWait" /></div>
    } else {
        <div class="mb-2">
            <Language Tag="ChangePasswordInstructions" />
        </div>

        <RequiredIndicator />

        <div class="mb-2">
            <label for="change-password-currentPassword"><Language Tag="CurrentPassword" Required="true" /></label>
            <br />
            <input type="text" id="change-password-currentPassword" class="form-control fixed-300" @bind="_passwordReset.CurrentPassword" @onkeyup="CheckForEnterKey" @bind:event="oninput" />
        </div>

        <div class="mb-2">
            <label for="change-password-newPassword"><Language Tag="NewPassword" Required="true" /></label>
            <br />
            <input type="text" id="change-password-newPassword" class="form-control fixed-300" @bind="_passwordReset.NewPassword" @onkeyup="CheckForEnterKey" @bind:event="oninput" />
        </div>

        <div class="mb-2">
            <label for="change-password-confirmPassword"><Language Tag="ConfirmPassword" Required="true" /></label>
            <br />
            <input type="text" id="change-password-confirmPassword" class="form-control fixed-300" @bind="_confirmPassword" @onkeyup="CheckForEnterKey" @bind:event="oninput" />
        </div>

        @if (Model.User.UserAccounts.Count > 1){
            <div class="mb-2">
                <div class="form-check form-switch">
                    <input type="checkbox" role="switch" class="form-check-input" id="change-password-AllAccounts" @bind="_passwordReset.AllAccounts" />
                    <label for="change-password-AllAccounts" class="form-check-label">
                        <Language Tag="UpdateAllPasswords" />
                        <span class="note"> - <Language Tag="UpdateAllPasswordsUserInfo" /></span>
                    </label>
                </div>
            </div>
        }

        @if (!String.IsNullOrWhiteSpace(_passwordReset.NewPassword) && _passwordReset.NewPassword != _confirmPassword) {
            <div class="alert alert-danger"><Language Tag="NewPasswordAndConfirmDontMatch" /></div>
        }

        <div class="mb-2">
            <button type="button" class="btn btn-primary" @onclick="UpdatePassword" disabled="@DisabledChangePassword">
                <Language Tag="ChangePassword" IncludeIcon="true" />
            </button>

            <button type="button" class="btn btn-success" @onclick="GenerateNewPassword">
                <Language Tag="GenerateNewPassword" IncludeIcon="true" />
            </button>
        </div>
    }
}
@code {
    [Parameter] public string? TenantCode { get; set; }

    protected string _confirmPassword = "";
    protected DataObjects.UserPasswordReset _passwordReset = new DataObjects.UserPasswordReset();
    protected bool processing = false;

    protected string _pageName = "changepassword";

    public void Dispose()
    {
        Model.OnChange -= OnDataModelUpdated;

        Model.Subscribers_OnChange.Remove(_pageName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
        }

        if (Model.Loaded) {
            if (Model.LoggedIn) {
                await Helpers.ValidateUrl(TenantCode);
            } else {
                Helpers.NavigateToRoot();
            }
        }
    }

    protected override async void OnInitialized()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        Model.View = _pageName;
        await ShowChangePassword();
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    public async Task CheckForEnterKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {
            await UpdatePassword();
        }
    }

    protected bool DisabledChangePassword
    {
        get {
            bool output = String.IsNullOrWhiteSpace(_passwordReset.CurrentPassword) || 
                String.IsNullOrWhiteSpace(_passwordReset.NewPassword) || 
                String.IsNullOrWhiteSpace(_confirmPassword);
            return output;
        }
    }

    protected async Task GenerateNewPassword()
    {
        Action<string> onPasswordAccepted = (string password) => {
            _passwordReset.NewPassword = password;
            _confirmPassword = password;
            StateHasChanged();
        };

        await Helpers.GetNewPassword(onPasswordAccepted);
    }

    protected async Task ShowChangePassword()
    {
        processing = false;

        if (Model.User.PreventPasswordChange) {
            Helpers.NavigateToRoot();
        }

        _confirmPassword = "";
        _passwordReset = new DataObjects.UserPasswordReset();
        _passwordReset.UserId = Model.User.UserId;

        await Helpers.DelayedFocus("change-password-currentPassword");
    }

    protected async Task UpdatePassword()
    {
        Model.ClearMessages();

        if (String.IsNullOrWhiteSpace(_passwordReset.CurrentPassword)) {
            await Helpers.DelayedFocus("change-password-currentPassword");
            return;
        }

        if (String.IsNullOrWhiteSpace(_passwordReset.NewPassword)) {
            await Helpers.DelayedFocus("change-password-newPassword");
            return;
        }

        if (String.IsNullOrWhiteSpace(_confirmPassword)) {
            await Helpers.DelayedFocus("change-password-confirmPassword");
            return;
        }

        List<string> errors = new List<string>();
        string focus = "";

        if (String.IsNullOrWhiteSpace(_passwordReset.CurrentPassword)) {
            errors.Add(Helpers.MissingRequiredField("CurrentPassword"));
            if (focus == "") { focus = "change-password-currentPassword"; }
        }
        if (String.IsNullOrWhiteSpace(_passwordReset.NewPassword)) {
            errors.Add(Helpers.MissingRequiredField("NewPassword"));
            if (focus == "") { focus = "change-password-newPassword"; }
        }
        if (String.IsNullOrWhiteSpace(_confirmPassword)) {
            errors.Add(Helpers.MissingRequiredField("ConfirmPassword"));
            if (focus == "") { focus = "change-password-confirmPassword"; }
        }

        if (errors.Any()) {
            Model.ErrorMessages(errors, false);
            if(focus != "") {
                await Helpers.DelayedFocus(focus);
            }
            return;
        }

        if (!String.IsNullOrWhiteSpace(_passwordReset.NewPassword) && _passwordReset.NewPassword != _confirmPassword) {
            _passwordReset.NewPassword = "";
            _confirmPassword = "";
            errors.Add(Helpers.Text("NewPasswordAndConfirmDontMatch"));
            await Helpers.DelayedFocus("change-password-newPassword");
            return;
        }

        processing = true;

        var reset = await Helpers.GetOrPost<DataObjects.BooleanResponse>("api/Data/ResetUserPassword", _passwordReset);

        Model.ClearMessages();

        if(reset != null) {
            if (reset.Result) {
                Helpers.NavigateTo("PasswordChanged");
            } else {
                await ShowChangePassword();
                Model.ErrorMessages(reset.Messages);
            }
        } else {
            Model.UnknownError();
        }
    }
}
