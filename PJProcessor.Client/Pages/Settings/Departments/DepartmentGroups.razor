@page "/Settings/DepartmentGroups"
@page "/{TenantCode}/Settings/DepartmentGroups"
@implements IDisposable
@using Blazored.LocalStorage
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject BlazorDataModel Model
@if (Model.Loaded && Model.View == _pageName) {
    if (_loading) {
        <h1 class="page-title">
            <Language Tag="DepartmentGroups" IncludeIcon="true" />
        </h1>
        <LoadingMessage />
    } else {
        <div class="@Model.StickyMenuClass">
            <h1 class="page-title">
                <Language Tag="DepartmentGroups" IncludeIcon="true" />
                <StickyMenuIcon />
            </h1>
            <div class="mb-2">
                <button type="button" class="btn btn-success" @onclick="AddNewDepartmentGroup">
                    <Language Tag="AddNewDepartmentGroup" IncludeIcon="true" />
                </button>

                <a href="@(Helpers.BuildUrl("Settings/Departments"))" role="button" class="btn btn-dark">
                    <Language Tag="Departments" IncludeIcon="true" />
                </a>
            </div>
        </div>

        <div class="mb-2">
            <div class="form-check form-switch">
                <input type="checkbox" id="deptGroups-IncludeDeletedRecords" class="form-check-input" @bind="Model.User.UserPreferences.IncludeDeletedItems" />
                <label for="deptGroups-IncludeDeletedRecords" class="form-check-label"><Language Tag="IncludeDeletedRecords" /></label>
            </div>
        </div>

        @if (Model.DepartmentGroups.Any()) {
            <table class="table table-sm">
                <thead>
                    <tr class="table-dark">
                        <th style="width:1%;"></th>
                        <th><Language Tag="DepartmentGroupName" /></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var dg in Model.DepartmentGroups) {
                        @if (!dg.Deleted || Model.User.UserPreferences.IncludeDeletedItems) {
                            <tr class="@(dg.Deleted ? "item-deleted" : "")">
                                <td>
                                    <button type="button" class="btn btn-xs btn-primary nowrap" @onclick="@(() => EditDepartmentGroup(dg.DepartmentGroupId))">
                                        <Language Tag="Edit" IncludeIcon="true" />
                                    </button>
                                </td>
                                <td>@dg.DepartmentGroupName</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        } else {
            <Language Tag="NoItemsToShow" />
        }
    }
}
@code {
    [Parameter] public string? TenantCode { get; set; }

    protected bool _loadedData = false;
    protected bool _loading = false;

    protected string _pageName = "departmentgroups";

    public void Dispose() {
        Model.OnChange -= OnDataModelUpdated;
        Model.OnSignalRUpdate -= SignalRUpdate;

        Model.Subscribers_OnChange.Remove(_pageName);
        Model.Subscribers_OnSignalRUpdate.Remove(_pageName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
        }

        if (Model.Loaded && Model.LoggedIn) {
            if (!Model.FeatureEnabledDepartments || !Model.User.Admin) {
                Helpers.NavigateToRoot();
                return;
            }

            await Helpers.ValidateUrl(TenantCode);

            if (!_loadedData) {
                _loadedData = true;
                await LoadData();
            }
        }
    }

    protected override void OnInitialized()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)){
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        if (!Model.Subscribers_OnSignalRUpdate.Contains(_pageName)){
            Model.Subscribers_OnSignalRUpdate.Add(_pageName);
            Model.OnSignalRUpdate += SignalRUpdate;
        }

        Model.View = _pageName;
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected void AddNewDepartmentGroup()
    {
        Helpers.NavigateTo("Settings/AddDepartmentGroup");
    }

    protected void EditDepartmentGroup(Guid DepartmentGroupId)
    {
        Helpers.NavigateTo("Settings/EditDepartmentGroup/" + DepartmentGroupId.ToString());
    }

    protected async Task LoadData()
    {
        _loading = true;
        // Always reload the data in the data model.
        await Helpers.LoadDepartments();
        await Helpers.LoadDepartmentGroups();
        _loading = false;

        StateHasChanged();
    }

    protected async void SignalRUpdate(DataObjects.SignalRUpdate update)
    {
        string view = Model.View;

        if (update.UpdateType == DataObjects.SignalRUpdateType.DepartmentGroup && Model.View == _pageName && update.UserId != Model.User.UserId) {
            await LoadData();
        }
    }
}
