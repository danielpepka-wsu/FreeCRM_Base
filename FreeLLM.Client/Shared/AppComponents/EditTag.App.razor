@implements IDisposable
@using Humanizer
@inject BlazorDataModel Model

@{
    // This component is used to display application-specific settings on the Tags and Edit Tag page.
    switch(Helpers.StringLower(Area)) {
        case "th":
            // Add any additional header cells here for the tag listing on the Tags page.
            break;

        case "td":
            // Add any additional cells here for each tag row on the Tags page.
            break;

        case "edit":
            // Add any additional fields here for the Edit Tag page.
            break;
    }
}

@code {
    [Parameter] public string Area { get; set; } = String.Empty;

    /// <summary>
    /// The Tenant object bound with the @bind-Value directive.
    /// </summary>
    [Parameter] public DataObjects.Tag Value { get; set; } = new DataObjects.Tag();

    /// <summary>
    /// The internal method allowing for 2-way binding with the @bind-Value option instead of @bind.
    /// </summary>
    [Parameter] public EventCallback<DataObjects.Tag> ValueChanged { get; set; }

    public void Dispose() { 
        Model.OnChange -= StateHasChanged;
    }

    protected override void OnInitialized()
    {
        Model.OnChange += StateHasChanged;
    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     RenderComponent();
    // }

    // protected override void OnParametersSet()
    // {
    //     RenderComponent();
    // }

    // protected void RenderComponent()
    // {
    //     // Do any work here that needs to be done after the component is rendered or parameters are set.
    // }

    public DataObjects.ModuleAction Save(DataObjects.Tag tag) {
        var output = new DataObjects.ModuleAction { Result = true };

        // Perform and pre-save checks here. Return false if there is an error and include any error messages.
        // Optionally set the focus to a specific field by setting output.FocusField to the field element id.

        return output;
    }

    protected void ValueHasChanged() {
        ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }
}
