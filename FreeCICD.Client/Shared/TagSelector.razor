@implements IDisposable
@inject BlazorDataModel Model
@inject Radzen.DialogService DialogService
@if (_loading) {
    <LoadingMessage />
} else {
    <div class="mb-2">
        <button type="button" class="btn btn-dark" @onclick="Cancel">
            <Language Tag="Cancel" IncludeIcon="true" />
        </button>

        <button type="button" class="btn btn-success" @onclick="OK">
            <Language Tag="OK" IncludeIcon="true" />
        </button>
    </div>

    if (InitialTagList.Any()) {
        <div class="mb-2">
            <Language Tag="CurrentTags" />
        </div>
        foreach (var tag in InitialTagList) {
            if (_preventDeselctingSelectedTags && _initialTags.Contains(tag.TagId)) {
                @((MarkupString)Helpers.RenderTag(tag))
            } else {
                <div class="tag-selector" @onclick="@(() => ToggleTag(tag.TagId))">
                    <div class="add-remove">
                        @if (_selectedTags.Contains(tag.TagId)) {
                            <Icon Name="Checked" />
                        } else {
                            <Icon Name="Unchecked" />
                        }
                    </div>
                    @((MarkupString)Helpers.RenderTag(tag))
                </div>
            }
        }
    }

    if (AvailableTagList.Any()) {
        <div class="mb-2">
            <Language Tag="SelectTagsToAdd" />
        </div>
        foreach(var tag in AvailableTagList) {
            <div class="tag-selector" @onclick="@(() => ToggleTag(tag.TagId))">
                <div class="add-remove">
                    @if (_selectedTags.Contains(tag.TagId)) {
                        <Icon Name="Checked" />
                    } else {
                        <Icon Name="Unchecked" />
                    }
                </div>
                @((MarkupString)Helpers.RenderTag(tag))
            </div>
        }
    }
}
@code {
    /// <summary>
    /// Appointments, EmailTemplates, or Services
    /// </summary>
    [Parameter]
    public DataObjects.TagModule? Module { get; set; }

    /// <summary>
    /// Method to invoke after tags are selected which will receive the list of selected Guids.
    /// </summary>
    [Parameter]
    public Delegate? OnComplete { get; set; }

    /// <summary>
    /// Optional input containing the selected tags.
    /// </summary>
    [Parameter]
    public List<Guid>? SelectedTags { get; set; }

    /// <summary>
    /// Option to show the currently-selected tags.
    /// </summary>
    [Parameter]
    public bool? ShowCurrentTags { get; set; }

    /// <summary>
    /// Option to prevent deselecting the currently-selected tags.
    /// </summary>
    [Parameter]
    public bool? PreventDeselctingSelectedTags { get; set; }

    protected List<Guid> _initialTags = new List<Guid>();
    protected bool _loading = true;
    protected string _module = String.Empty;
    protected bool _preventDeselctingSelectedTags = false;
    protected List<Guid> _selectedTags = new List<Guid>();
    protected bool _showCurrentTags = true;

    public void Dispose() { }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            _selectedTags = SelectedTags != null && SelectedTags.Any()
                ? SelectedTags
                : new List<Guid>();

            _initialTags = _selectedTags.ToList();

            _preventDeselctingSelectedTags = PreventDeselctingSelectedTags.HasValue ? (bool)PreventDeselctingSelectedTags : false;

            _showCurrentTags = ShowCurrentTags.HasValue ? (bool)ShowCurrentTags : true;

            await RenderTags();
        }
    }

    protected List<DataObjects.Tag> AvailableTagList
    {
        get {
            List<DataObjects.Tag> output = new List<DataObjects.Tag>();

            if (Module != null) {
                switch (Module) {
                    case DataObjects.TagModule.Appointment:
                        output = Model.Tags.Where(x => !_initialTags.Contains(x.TagId) && x.UseInAppointments == true)
                            .OrderBy(x => x.Name)
                            .ToList();
                        break;

                    case DataObjects.TagModule.EmailTemplate:
                        output = Model.Tags.Where(x => !_initialTags.Contains(x.TagId) && x.UseInEmailTemplates == true)
                            .OrderBy(x => x.Name)
                            .ToList();
                        break;

                    case DataObjects.TagModule.Service:
                        output = Model.Tags.Where(x => !_initialTags.Contains(x.TagId) && x.UseInServices == true)
                            .OrderBy(x => x.Name)
                            .ToList();
                        break;
                }

            } else {
                output = Model.Tags.Where(x => !_initialTags.Contains(x.TagId) && x.Enabled == true)
                    .OrderBy(x => x.Name)
                    .ToList();
            }


            return output;
        }
    }

    protected void Cancel()
    {
        DialogService.Close();
    }

    protected void OK()
    {
        _selectedTags = _selectedTags.OrderBy(x => TagName(x)).ToList();

    OnComplete?.DynamicInvoke(_selectedTags);
        DialogService.Close();
    }

    protected async Task RenderTags()
    {
        if (!Model.Tags.Any()) {
            await Helpers.LoadTags();
        }

        _loading = false;
        StateHasChanged();
    }

    protected string TagName(Guid TagId)
    {
        string output = String.Empty;

        var tag = Model.Tags.FirstOrDefault(x => x.TagId == TagId);
        if(tag != null) {
            output += tag.Name;
        }

        return output;
    }

    protected void ToggleTag(Guid TagId)
    {
        if (_selectedTags.Contains(TagId)) {
            _selectedTags = _selectedTags.Where(x => x != TagId).ToList();
        } else {
            _selectedTags.Add(TagId);
        }
    }

    protected List<DataObjects.Tag> InitialTagList
    {
        get {
            var output = new List<DataObjects.Tag>();

            if (_showCurrentTags) {
                output = Model.Tags.Where(x => _initialTags.Contains(x.TagId))
                   .OrderBy(x => x.Name)
                   .ToList();
            }

            return output;
        }
    }
}
