@page "/"
@page "/{TenantCode}"
@inject BlazorDataModel Model
@implements IDisposable
@inject HttpClient Http

@if (Model.Loaded && Model.View == _pageName) {
    if (!String.IsNullOrWhiteSpace(LogoUrl) && Model.Tenant.TenantSettings.LogoIncludedOnHomePage) {
        <div class="home-page-logo-container">
            <img src="@LogoUrl" class="logo-homepage" />
        </div>
    }

    <h1 class="page-title">
        @if (!String.IsNullOrWhiteSpace(Model.Tenant.TenantSettings.AppIcon)) {
            <i>@((MarkupString)Model.Tenant.TenantSettings.AppIcon)</i>
        }
        <Language Tag="Welcome" ReplaceSpaces="true" /> @Model.User.FirstName
    </h1>

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            @for (int i = _hidePAT ? 1 : 0; i < StepNames.Length; i++) {
                <li class="breadcrumb-item@(currentStep == i ? " active" : "")">
                    @StepNames[i]
                </li>
            }
        </ol>
    </nav>

    <div class="card">
        @{
            switch (StepNames[currentStep]) {
                case DataObjects.StepNameList.SelectPAT:
                    <div class="card-header">
                        Azure DevOps Credentials
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-primary"
                            @onclick="PATandOrgNameChangedWizard"
                            disabled="@(_loading || string.IsNullOrWhiteSpace(DevOpsPAT) || string.IsNullOrWhiteSpace(OrgName))">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.SelectProject:
                    <div class="card-header">
                        Select Project
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.SelectProject)" disabled="@(_loading || string.IsNullOrEmpty(SelectedProjectId))">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.SelectRepository:
                    <div class="card-header">
                        Select Repository
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.SelectRepository)" disabled="@(_loading || string.IsNullOrEmpty(SelectedRepoId))">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.SelectBranch:
                    <div class="card-header">
                        Select Branch
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.SelectBranch)" disabled="@(_loading || string.IsNullOrEmpty(SelectedBranch))">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.SelectCsprojFile:
                    <div class="card-header">
                        Select .csproj File
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.SelectCsprojFile)" disabled="@(_loading)">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.EnvironmentSettings:
                    <div class="card-header">
                        Environment Settings
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.EnvironmentSettings)" disabled="@(_loading)">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.SelectPipelineSelection:
                    <div class="card-header">
                        Pipeline Selection
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-primary" @onclick="(e) => NextStep(DataObjects.StepNameList.SelectPipelineSelection)" disabled="@(_loading || (SelectedPipelineId <= 0 && string.IsNullOrWhiteSpace(NewPipelineName)))">
                                Next
                                <Icon Name="Next" />
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.YAMLPreviewAndSave:
                    <div class="card-header">
                        YAML Preview & Save
                        <div class="card-header-buttons text-end">
                            <button class="btn btn-secondary me-2" @onclick="PrevStep" disabled="@(_loading)">
                                <Icon Name="Previous" />
                                Back
                            </button>
                            <button class="btn btn-success" @onclick="(e) => NextStep(DataObjects.StepNameList.YAMLPreviewAndSave)" disabled="@(_loading)">
                                <Icon Name="Save" />
                                Save YAML & Pipeline Changes
                            </button>
                        </div>
                    </div>
                    break;

                case DataObjects.StepNameList.Completed:
                    <div class="card-header">Completed</div>
                    break;
            }
        }

        <div class="card-body">
            @{
                switch (StepNames[currentStep]) {
                    case DataObjects.StepNameList.SelectPAT:
                        <div class="mb-3">
                            <label for="patInput" class="form-label">Personal Access Token (PAT):</label>
                            <input type="password" disabled="@(_loading)" id="patInput" class="form-control" @bind="DevOpsPAT" @bind:event="oninput" placeholder="Enter your Azure DevOps PAT" />
                        </div>
                        <div class="mb-3">
                            <label for="orgNameInput" class="form-label">Organization Name:</label>
                            <input type="text" disabled="@(_loading)" id="orgNameInput" class="form-control" @bind="OrgName" @bind:event="oninput" placeholder="Enter your Organization Name" />
                        </div>

                        <div class="mb-3">
                            <p>Or <a href="@Helpers.BuildUrl("login")">Login</a> to use the PAT and Org Information stored in the appsettings.json file.</p>
                        </div>
                        break;

                    case DataObjects.StepNameList.SelectProject:
                        <label class="form-label">Project:</label>
                        <select class="form-select" @onchange="ProjectChangedWizard" disabled="@_loading">
                            <option value="">-- Select Project --</option>
                            @if (DevopsProjectInfos != null) {
                                @foreach (var proj in DevopsProjectInfos.OrderBy(o => (string.Empty + o.ProjectName).ToLower())) {
                                    <option value="@proj.ProjectId" selected="@(proj.ProjectId == SelectedProjectInfo?.ProjectId ? "selected" : null)">@proj.ProjectName</option>
                                }
                            }
                        </select>
                        break;

                    case DataObjects.StepNameList.SelectRepository:
                        <label class="form-label">Repository:</label>
                        <select class="form-select" @onchange="RepoChangedWizard" disabled="@_loading">
                            <option value="">-- Select Repository --</option>
                            @if (SelectedProjectInfo != null) {
                                @foreach (var repo in SelectedProjectInfo.GitRepos.OrderBy(o => (string.Empty + o.RepoName).ToLower())) {
                                    <option value="@repo.RepoId" selected="@(repo.RepoId == SelectedRepoInfo?.RepoId ? "selected" : null)">@repo.RepoName</option>
                                }
                            }
                        </select>
                        break;

                    case DataObjects.StepNameList.SelectBranch:
                        <label class="form-label">Branch:</label>
                        <select class="form-select" @onchange="BranchChangedWizard" disabled="@_loading">
                            <option value="">-- Select Branch --</option>
                            @if (SelectedRepoInfo != null) {
                                @foreach (var branch in SelectedRepoInfo.GitBranches.OrderBy(o => (string.Empty + o.BranchName).ToLower())) {
                                    <option value="@branch.BranchName" selected="@(branch.BranchName == SelectedBranchInfo?.BranchName ? "selected" : null)">@branch.BranchName</option>
                                }
                            }
                        </select>
                        break;

                    case DataObjects.StepNameList.SelectCsprojFile:
                        if (SelectedBranchInfo == null || SelectedBranchInfo.Files == null || SelectedBranchInfo.Files.Count() == 0) {
                            <p>No file structure available for the selected branch.</p>
                        } else {
                            var csprojFiles = SelectedBranchInfo.Files
                            .Where(f => f.FileType.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase))
                            .ToList();
                            if (csprojFiles.Count == 0) {
                                <p>No .csproj files found in this branch.</p>
                            } else {
                                <label class="form-label">Choose a .csproj file:</label>
                                <select class="form-select" @onchange="CsProjectFileChangedWizard" disabled="@_loading">
                                    <option value="">-- Select .csproj file --</option>
                                    @foreach (var file in csprojFiles.OrderBy(f => f.Path)) {
                                        <option value="@file.Path" selected="@(file.Path == SelectedCsprojPath ? "selected" : null)">@file.Path</option>
                                    }
                                </select>
                            }
                        }
                        break;

                    case DataObjects.StepNameList.EnvironmentSettings:
                        <p>Select environments to configure (optional):</p>
                        foreach (var envKey in GlobalSettings.App.EnvironmentOptions.Keys) {
                            <div class="form-check mb-2">
                                <input type="checkbox" class="form-check-input" checked="@(EnvSettings.ContainsKey(envKey))" id="envCheck_@envKey" @onchange="@(e => EnvironmentChangedWizard(envKey, e))" disabled="@_loading" />
                                <label class="form-check-label" for="envCheck_@envKey">@envKey Environment</label>
                            </div>
                            if (EnvSettings.Keys.Contains(envKey)) {
                                var envSetting = EnvSettings[envKey];
                                <div class="border p-2 mb-3">
                                    <h6>@envKey Environment Settings</h6>
                                    <label class="form-label">IIS Deployment Type:</label>
                                    <select class="form-select" @onchange="@(e => EnvironmentDeploymentTypeChangedWizard(envKey, e))" disabled="@_loading">
                                        <option value="IISWebsite" selected="@(envSetting.IISDeploymentType == "IISWebsite" ? "selected" : null)">IISWebsite</option>
                                        <option value="IISWebsiteAuth" selected="@(envSetting.IISDeploymentType == "IISWebsiteAuth" ? "selected" : null)">IISWebsiteAuth</option>
                                        <option value="IISWebApplication" selected="@(envSetting.IISDeploymentType == "IISWebApplication" ? "selected" : null)">IISWebApplication</option>
                                        <option value="IISWebApplicationAuth" selected="@(envSetting.IISDeploymentType == "IISWebApplicationAuth" ? "selected" : null)">IISWebApplicationAuth</option>
                                    </select>

                                    <label class="form-label">Website Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.WebsiteName" @bind:event="oninput" disabled="@_loading" />

                                    @if (envSetting.IISDeploymentType == "IISWebApplication" || envSetting.IISDeploymentType == "IISWebApplicationAuth") {
                                        <label class="form-label">Virtual Path:</label>
                                        <input type="text" class="form-control" @bind="envSetting.VirtualPath" @bind:event="oninput" placeholder="Enter virtual path" disabled="@_loading" />
                                    }

                                    @if (envSetting.IISDeploymentType.Contains("Auth")) {
                                        <label class="form-label">Auth User:</label>
                                        <input type="text" class="form-control" @bind="envSetting.AuthUser" @bind:event="oninput" placeholder="Enter the Auth User" disabled="@_loading" />
                                    }

                                    <label class="form-label">App Pool Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.AppPoolName" @bind:event="oninput" disabled="@_loading" />

                                    <label class="form-label">Variable Group Name:</label>
                                    <input type="text" class="form-control" @bind="envSetting.VariableGroupName" @bind:event="oninput" placeholder="Enter variable group name" disabled="@_loading" />
                                </div>
                            }
                        }
                        break;

                    case DataObjects.StepNameList.SelectPipelineSelection:
                        <label class="form-label">Select Existing Pipeline:</label>
                        <select class="form-select" @onchange="@(e => PipelineChangedWizard(e))" disabled="@_loading">
                            <option value="">-- Select Pipeline or Create New --</option>
                            @foreach (var group in DevopsPipelineDefinitions.GroupBy(p => p.Path).OrderBy(g => g.Key)) {
                                <optgroup label="@group.Key">
                                    @foreach (var pipe in group.OrderBy(p => p.Name)) {
                                        <option value="@pipe.Id" selected="@(pipe.Id == SelectedPipelineInfo?.Id ? "selected" : null)">@pipe.Name</option>
                                    }
                                </optgroup>
                            }
                        </select>

                        @if (SelectedPipelineId <= 0 || SelectedPipelineId == null) {
                            <div class="mt-3">
                                <label class="form-label">New Pipeline Name:</label>
                                <input type="text" class="form-control" @bind="NewPipelineName" @bind:event="oninput" placeholder="Enter pipeline name" />
                            </div>
                        } else {
                            DataObjects.DevopsPipelineDefinition? pipeline = DevopsPipelineDefinitions?.FirstOrDefault(p => p.Id == SelectedPipelineId);
                            if (pipeline != null) {
                                <div class="mt-3">
                                    <p><strong>Pipeline Name:</strong> @pipeline.Name</p>
                                    <p><strong>Pipeline Id:</strong> @pipeline.Id</p>
                                    <p><strong>YML File:</strong> @pipeline.YamlFileName</p>
                                </div>
                            }
                        }
                        break;

                    case DataObjects.StepNameList.YAMLPreviewAndSave:
                        <div class="row yaml-diff mt-4">
                            <div class="col-12">
                                <h5>YAML Diff</h5>
                                @if (string.IsNullOrWhiteSpace(ExistingYamlContent) && string.IsNullOrWhiteSpace(NewYamlContent)) {
                                    <p>Nothing to diff.</p>
                                } else {
                                    <MonacoEditor Id="yaml-diff-editor"
                                    Language="@MonacoEditor.MonacoLanguage.yaml"
                                    ReadOnly="true"
                                    ValueToDiff="@ExistingYamlContent"
                                    @bind-Value="NewYamlContent" />
                                }
                            </div>
                        </div>
                        break;

                    case DataObjects.StepNameList.Completed:
                        <div class="mb-3">
                            <p>
                                The YAML Pipeline has been created. Remember to edit your variable groups before triggering a deployment.
                            </p>
                            <div class="mt-3">
                                <h5>Resources Created / Accessible</h5>
                                <ul>
                                    @if (SelectedProjectInfo != null && !string.IsNullOrWhiteSpace(SelectedProjectInfo.ResourceUrl)) {
                                        <li>
                                            <a target="_blank" href="@SelectedProjectInfo.ResourceUrl">Project: @SelectedProjectInfo.ProjectName</a>
                                        </li>
                                    }
                                    @if (SelectedBranchInfo != null && !string.IsNullOrWhiteSpace(SelectedBranchInfo.ResourceUrl)) {
                                        <li>
                                            <a target="_blank" href="@SelectedBranchInfo.ResourceUrl">Branch: @SelectedBranchInfo.BranchName</a>
                                        </li>
                                    }
                                    @if (LastSavedPipelineDefinition == null || string.IsNullOrWhiteSpace(LastSavedPipelineDefinition.ResourceUrl)) {
                                            <li>
                                                <div class="d-flex align-items-center">
                                                    <div class="spinner-border spinner-border-sm me-2" role="status" aria-label="Saving pipeline info">
                                                        <span class="visually-hidden">Saving pipeline info</span>
                                                    </div>
                                                    <span>Saving Pipeline...</span>
                                                </div>
                                            </li>
                                    } else {
                                        <li>
                                            <a target="_blank" href="@LastSavedPipelineDefinition.ResourceUrl">Pipeline: @LastSavedPipelineDefinition.Name</a>
                                        </li>
                                    }                                    
                                </ul>
                            </div>
                        </div>
                        break;
                }
            }

            @if (_loading) {
                <div class="d-flex flex-column justify-content-center align-items-center my-5">
                    <div class="spinner-border text-primary" role="status" aria-label="Loading DevOps Info">
                        <span class="visually-hidden">Loading DevOps Info</span>
                    </div>
                    <div class="mt-3">Loading DevOps Info... please wait, this can take up to a minute.</div>
                </div>
            } else if (_loadingMessages.Any()) {
                <div class="update-messages-header">Update Information</div>

                <div class="update-messages">
                    <table class="table table-striped">
                        <thead>
                            <tr class="table-dark">
                                <th scope="col">Message</th>
                                <th scope="col">Created</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var message in _loadingMessages) {
                                <tr>
                                    <td>@message.Message</td>
                                    <td>@message.Created</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string? TenantCode { get; set; }

    protected bool _hidePAT = false;
    protected bool _loadedData = false;
    protected bool _loading = false;
    private List<Guid> _loadingMessagesIds = new List<Guid>();
    private List<LoadingMessage> _loadingMessages = new List<LoadingMessage>();
    protected string _pageName = "home";

    protected class LoadingMessage
    {
        public DateTime Created { get; set; } = DateTime.Now;
        public string Message { get; set; } = string.Empty;
    }

    private void ClearLoadingMessages() {
        // Previously used to reset loading message state; retention disabled.
        // _loadingMessagesIds = new List<Guid>();
        // _loadingMessages = new List<LoadingMessage>();
        // StateHasChanged();
    }

    public void Dispose() {
        Model.OnChange -= OnDataModelUpdated;
        Model.OnSignalRUpdate -= SignalRUpdate;

        Model.Subscribers_OnChange.Remove(_pageName);
        Model.Subscribers_OnSignalRUpdate.Remove(_pageName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            Model.TenantCodeFromUrl = TenantCode;
            Model.OnChange += OnDataModelUpdated;
        }

        if (Model.Loaded) {
            if (Model.LoggedIn) {
                if (!_loadedData) {
                    _loadedData = true;
                    await Helpers.ValidateUrl(TenantCode, true);
                    _hidePAT = true;
                    currentStep = 1; // Bypass the PAT and organization name step for authenticated users.
                    _loading = true;
                    DevOpsPAT = "user is logged in, doesn't matter what this value is";
                    OrgName = "user is logged in, this value is ignored, put anything here";
                    // User is authenticated; proceed to retrieve project and organization data.
                    await PATandOrgNameChangedWizard();
                    _loading = false;
                    StateHasChanged();
                }
            } else {
                if (!_loadedData) {
                    _loadedData = true;
                    await Helpers.ValidateUrl(TenantCode, true);
                    _loading = true;
                    OrgName = string.Empty;
                    DevOpsPAT = string.Empty;
                    currentStep = 0; // Ensure PAT and organization name collection is presented for unauthenticated users.
                    _loading = false;

                    StateHasChanged();
                }
            }
        }
    }

    protected override void OnInitialized() {
        if (!Model.Subscribers_OnChange.Contains(_pageName)) {
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        if (!Model.Subscribers_OnSignalRUpdate.Contains(_pageName)) {
            Model.Subscribers_OnSignalRUpdate.Add(_pageName);
            Model.OnSignalRUpdate += SignalRUpdate;
        }

        // Timer initialization is currently disabled.
        // _timer = new System.Timers.Timer();
        // _timer.Interval = 1000;
        // _timer.Elapsed += TimerExecuted;
        // _timer.AutoReset = true;
        // _timer.Start();

        Model.View = _pageName;
    }

    protected void OnDataModelUpdated() {
        if (Model.View == _pageName) {
            StateHasChanged();
        }
    }

    protected async void SignalRUpdate(DataObjects.SignalRUpdate update) {
        if (update.UpdateType == DataObjects.SignalRUpdateType.LoadingDevOpsInfoStatusUpdate && update.ItemId != null) {
            if (_loadingMessagesIds != null && !_loadingMessagesIds.Any(m => m == update.ItemId)) {
                if (update?.ItemId != null) {
                    _loadingMessagesIds.Add(update.ItemId.Value);
                    _loadingMessages.Insert(0, new LoadingMessage {
                        Created = DateTime.UtcNow,
                        Message = update.Message,
                    });
                }
                StateHasChanged();
            }
        }
        await Task.CompletedTask;
    }

    protected string LogoUrl {
        get {
            string output = "";

            if (Model.Tenant.TenantSettings.Logo.HasValue && Model.Tenant.TenantSettings.Logo != Guid.Empty) {
                output = Model.ApplicationUrl + "File/View/" + ((Guid)Model.Tenant.TenantSettings.Logo).ToString();
            }

            return output;
        }
    }

    protected void TimerExecuted(Object? source, System.Timers.ElapsedEventArgs e) {
        // Placeholder for timer execution logic.
        //Console.WriteLine("Timer Executed");
    }
}

@* App specific variable definition code section *@
@code {
    private List<DataObjects.DevopsProjectInfo> DevopsProjectInfos { get; set; } = new();
    private List<DataObjects.DevopsVariableGroup> DevopsVariableGroups { get; set; } = new();
    private List<DataObjects.DevopsPipelineDefinition> DevopsPipelineDefinitions { get; set; } = new();

    private int currentStep = 0;
    private string? SelectedProjectId = string.Empty;
    private string? SelectedRepoId = string.Empty;
    private string? SelectedBranch = string.Empty;
    private string? SelectedCsprojPath = string.Empty;
    private string? NewPipelineName = string.Empty;
    private int? SelectedPipelineId = 0;
    private string ExistingYamlContent = string.Empty;
    private string NewYamlContent { get; set; } = string.Empty;

    // Captured result of the save/create pipeline operation
    private DataObjects.BuildDefinition? LastSavedPipelineDefinition { get; set; } = null;

    // PAT and organization name for anonymous usage when not logged in.
    private string DevOpsPAT { get; set; } = string.Empty;
    private string OrgName { get; set; } = string.Empty;

    // State for environment configuration checkboxes.
    private Dictionary<GlobalSettings.EnvironmentType, DataObjects.EnvSetting> EnvSettings = new();

    private string[] StepNames = [
        DataObjects.StepNameList.SelectPAT,
        DataObjects.StepNameList.SelectProject,
        DataObjects.StepNameList.SelectRepository,
        DataObjects.StepNameList.SelectBranch,
        DataObjects.StepNameList.SelectCsprojFile,
        DataObjects.StepNameList.EnvironmentSettings,
        DataObjects.StepNameList.SelectPipelineSelection,
        DataObjects.StepNameList.YAMLPreviewAndSave,
        DataObjects.StepNameList.Completed,
    ];

    protected DataObjects.DevopsProjectInfo? SelectedProjectInfo => DevopsProjectInfos?.FirstOrDefault(p => p.ProjectId == SelectedProjectId);
    protected DataObjects.DevopsGitRepoInfo? SelectedRepoInfo => SelectedProjectInfo?.GitRepos.FirstOrDefault(r => r.RepoId == SelectedRepoId);
    protected DataObjects.DevopsGitRepoBranchInfo? SelectedBranchInfo => SelectedRepoInfo?.GitBranches.FirstOrDefault(r => r.BranchName == SelectedBranch);
    protected DataObjects.DevopsPipelineDefinition? SelectedPipelineInfo => DevopsPipelineDefinitions?.FirstOrDefault(p => p.Id == SelectedPipelineId);
    protected DataObjects.DevOpsPipelineRequest? DevOpsPipelineRequest => new DataObjects.DevOpsPipelineRequest {
        Pat = DevOpsPAT,
        OrgName = OrgName,
        ProjectId = SelectedProjectInfo?.ProjectId ?? "",
        RepoId = SelectedRepoInfo?.RepoId ?? "",
        Branch = SelectedBranch ?? "",
        YAMLFileName = SelectedPipelineInfo?.YamlFileName ?? "",
        PipelineId = SelectedPipelineId.GetValueOrDefault(0),
        PipelineName = SelectedPipelineId > 0 ? string.Empty : NewPipelineName ?? "",
        EnvironmentSettings = EnvSettings.ToDictionary(kvp => kvp.Key, kvp => kvp.Value),
        CsProjectFile = SelectedCsprojPath ?? "",
        ConnectionId = Model.SignalrClientRegistration?.ConnectionId
    };
}

@* App specific method definition code section *@
@code {

    private async Task NextStep(string? stepName = "") {
        // Navigation state update and preparation.
        ClearLoadingMessages();
        if (currentStep < StepNames.Length - 1) {
            currentStep++;
            StateHasChanged();
        }

        // The logic below uses the provided stepName argument (the originating step)
        // rather than the updated currentStep; therefore actions correspond to the step
        // from which navigation was initiated.
        switch (stepName) {
            case DataObjects.StepNameList.SelectProject:
                if (!string.IsNullOrWhiteSpace(SelectedProjectId)) {
                    _loading = true;
                    try {
                        List<DataObjects.DevopsPipelineDefinition>? results = await Helpers.GetOrPost<List<DataObjects.DevopsPipelineDefinition>>(DataObjects.Endpoints.DevOps.GetDevOpsPipelines +
                            "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                            "&projectId=" + Uri.EscapeDataString($"{SelectedProjectInfo?.ProjectId}") +
                            "&orgName=" + Uri.EscapeDataString(OrgName) +
                            "&pat=" + Uri.EscapeDataString(DevOpsPAT)
                        );

                        DevopsPipelineDefinitions = results?.ToList() ?? new List<DataObjects.DevopsPipelineDefinition>();

                        // Automatically select the pipeline if only one is available.
                        if (DevopsPipelineDefinitions != null && DevopsPipelineDefinitions.Count == 1) {
                            SelectedPipelineId = DevopsPipelineDefinitions[0].Id;
                        }
                    } catch (Exception ex) {
                        // Error loading DevOps information: ex.Message (suppressed)
                    } finally {
                        _loading = false;
                        StateHasChanged();
                    }

                    // Allow a brief pause so status messages are perceptible.
                    await Task.Delay(800);
                }
                break;
            case DataObjects.StepNameList.SelectRepository:
                if (string.IsNullOrWhiteSpace(SelectedRepoId)) {
                    // No action required; selection is driven by dropdown change.
                }
                break;
            case DataObjects.StepNameList.SelectBranch:
                if (string.IsNullOrWhiteSpace(SelectedBranch)) {
                    // No action required; selection is driven by dropdown change.
                }
                break;
            case DataObjects.StepNameList.SelectCsprojFile:
                if (string.IsNullOrWhiteSpace(SelectedCsprojPath)) {
                    // No action required; selection is driven by dropdown change.
                }
                break;
            case DataObjects.StepNameList.EnvironmentSettings:
                if (EnvSettings == null || EnvSettings.Count() == 0) {
                    // No triggered behavior required for this step unless environments are configured.
                }
                break;
            case DataObjects.StepNameList.SelectPipelineSelection:
                if (!string.IsNullOrWhiteSpace(NewPipelineName) || SelectedPipelineId != null) {
                    ExistingYamlContent = string.Empty;

                    var pipeline = DevopsPipelineDefinitions.FirstOrDefault(p => p.Id == SelectedPipelineId);
                    if (pipeline != null && !string.IsNullOrEmpty(pipeline.YamlFileName)) {
                        var filePath = pipeline.YamlFileName;

                        try {
                            string? results = await Helpers.GetOrPost<string>(DataObjects.Endpoints.DevOps.GetDevOpsYmlFileContent +
                                "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                                "&filePath=" + Uri.EscapeDataString($"{filePath}") +
                                "&projectId=" + Uri.EscapeDataString($"{SelectedProjectInfo?.ProjectId}") +
                                "&repoId=" + Uri.EscapeDataString($"{SelectedRepoInfo?.RepoId}") +
                                "&branchName=" + Uri.EscapeDataString($"{SelectedBranchInfo?.BranchName}") +
                                "&orgName=" + Uri.EscapeDataString(OrgName) +
                                "&pat=" + Uri.EscapeDataString(DevOpsPAT)
                            );
                            ExistingYamlContent = results;
                        } catch (Exception ex) {
                            ExistingYamlContent = "";
                            // Error retrieving existing pipeline YAML: ex.Message (suppressed)
                            //Console.WriteLine("Error loading pipeline YAML: " + ex.Message);
                        }

                    } else {
                        SelectedPipelineId = 0;
                        ExistingYamlContent = "";
                    }

                    NewYamlContent = string.Empty;

                    try {
                        var response = await Helpers.GetOrPost<string>($"{DataObjects.Endpoints.DevOps.PreviewDevOpsYmlFileContents}", DevOpsPipelineRequest);
                        if (!string.IsNullOrWhiteSpace(response)) {
                            NewYamlContent = response;
                            _loadingMessages.Insert(0, new LoadingMessage { Message = "Preview fetched successfully.", Created = DateTime.UtcNow });
                        } else {
                            _loadingMessages.Insert(0, new LoadingMessage { Message = $"Error", Created = DateTime.UtcNow });
                        }
                    } catch (Exception ex) {
                        _loadingMessages.Insert(0, new LoadingMessage { Message = $"Exception: {ex.Message}", Created = DateTime.UtcNow });
                    } finally {
                        _loading = false;
                        StateHasChanged();
                    }
                }
                break;
            case DataObjects.StepNameList.YAMLPreviewAndSave:
                try {
                    LastSavedPipelineDefinition = null;
                    var createOrUpdateResult = await Helpers.GetOrPost<DataObjects.BuildDefinition>($"{DataObjects.Endpoints.DevOps.CreateOrUpdateDevOpsPipeline}", DevOpsPipelineRequest);
                    if (createOrUpdateResult != null && createOrUpdateResult.Id > 0) {
                        LastSavedPipelineDefinition = createOrUpdateResult;
                        _loadingMessages.Insert(0, new LoadingMessage { Message = "Pipeline created/updated successfully.", Created = DateTime.UtcNow });
                    } else {
                        _loadingMessages.Insert(0, new LoadingMessage { Message = $"Error", Created = DateTime.UtcNow });
                    }
                } catch (Exception ex) {
                    _loadingMessages.Insert(0, new LoadingMessage { Message = $"Exception: {ex.Message}", Created = DateTime.UtcNow });
                } finally {
                    _loading = false;

                    if (currentStep < StepNames.Length - 1) {
                        currentStep++;
                    }

                    StateHasChanged();
                }
                break;

            default:
                break;
        }
    }


    private void PrevStep() {
        ClearLoadingMessages();
        if (currentStep > 0) {
            currentStep--;
            StateHasChanged();
        }
    }

    private async Task PATandOrgNameChangedWizard() {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            // Retrieve projects based on current authentication context.
            List<DataObjects.DevopsProjectInfo>? result = await Helpers.GetOrPost<List<DataObjects.DevopsProjectInfo>>(DataObjects.Endpoints.DevOps.GetDevOpsProjects +
                "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                "&orgName=" + Uri.EscapeDataString(OrgName) +
                "&pat=" + Uri.EscapeDataString(DevOpsPAT)
            );

            if (result != null && result.Any()) {
                DevopsProjectInfos = result.ToList();
                currentStep = 1;
                StateHasChanged();

                if (DevopsProjectInfos.Count == 1) {
                    SelectedProjectId = DevopsProjectInfos[0].ProjectId;
                    await ProjectChangedWizard(new ChangeEventArgs { Value = SelectedProjectId });
                }
            } else {
                DevopsProjectInfos = new List<DataObjects.DevopsProjectInfo>();
            }
        } catch (Exception ex) {
            // Error occurred while updating project data: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    // Event handlers for wizard dropdown updates.
    private async Task ProjectChangedWizard(ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            // Reset dependent selections following project change.
            SelectedProjectId = e.Value?.ToString() ?? "";
            SelectedRepoId = "";
            SelectedBranch = "";

            if (SelectedProjectInfo != null) {
                List<DataObjects.DevopsGitRepoInfo>? result = await Helpers.GetOrPost<List<DataObjects.DevopsGitRepoInfo>>(DataObjects.Endpoints.DevOps.GetDevOpsRepos +
                    "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                    "&projectId=" + Uri.EscapeDataString($"{SelectedProjectInfo.ProjectId}") +
                    "&orgName=" + Uri.EscapeDataString(OrgName) +
                    "&pat=" + Uri.EscapeDataString(DevOpsPAT)
                );

                if (result != null && result.Any()) {
                    if (DevopsProjectInfos != null) {
                        foreach (var item in DevopsProjectInfos) {
                            if (item.ProjectId == SelectedProjectId) {
                                item.GitRepos = result;
                            } else {
                                item.GitRepos = new List<DataObjects.DevopsGitRepoInfo>();
                            }
                        }
                    }

                    if (result.Count == 1) {
                        SelectedRepoId = result[0].RepoId;
                        await RepoChangedWizard(new ChangeEventArgs { Value = SelectedRepoId });
                    }
                }
            }
        } catch (Exception ex) {
            // Error in ProjectChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task RepoChangedWizard(ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            SelectedRepoId = e.Value?.ToString() ?? "";
            SelectedBranch = "";

            if (SelectedRepoInfo != null) {
                List<DataObjects.DevopsGitRepoBranchInfo>? result = await Helpers.GetOrPost<List<DataObjects.DevopsGitRepoBranchInfo>>(DataObjects.Endpoints.DevOps.GetDevOpsBranches +
                    "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                    "&projectId=" + Uri.EscapeDataString($"{SelectedProjectInfo?.ProjectId}") +
                    "&repoId=" + Uri.EscapeDataString($"{SelectedRepoInfo?.RepoId}") +
                    "&orgName=" + Uri.EscapeDataString(OrgName) +
                    "&pat=" + Uri.EscapeDataString(DevOpsPAT)
                );

                if (result != null && result.Any()) {
                    // Clear branch lists for non-selected repositories to avoid stale data.
                    if (DevopsProjectInfos != null) {
                        foreach (var project in DevopsProjectInfos) {
                            if (project.ProjectId == SelectedProjectId) {
                                foreach (var repo in project.GitRepos) {
                                    if (repo.RepoId == SelectedRepoInfo?.RepoId) {
                                        repo.GitBranches = result;
                                    } else {
                                        repo.GitBranches = new List<DataObjects.DevopsGitRepoBranchInfo>();
                                    }
                                }
                            }
                        }
                    }

                    if (result.Count == 1) {
                        SelectedBranch = result[0].BranchName;
                        await BranchChangedWizard(new ChangeEventArgs { Value = SelectedBranch });
                    }
                }
            }
        } catch (Exception ex) {
            // Error in RepoChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task BranchChangedWizard(ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            SelectedBranch = e.Value?.ToString() ?? "";

            if (SelectedBranchInfo != null) {
                // Expected query parameters include projectId, repoId, branchName, optional pat, orgName, and connectionId.
                List<DataObjects.DevopsFileItem>? result = await Helpers.GetOrPost<List<DataObjects.DevopsFileItem>>(DataObjects.Endpoints.DevOps.GetDevOpsFiles +
                    "?connectionId=" + Uri.EscapeDataString((string.Empty + Model?.SignalrClientRegistration?.ConnectionId).Trim()) +
                    "&projectId=" + Uri.EscapeDataString($"{SelectedProjectInfo?.ProjectId}") +
                    "&repoId=" + Uri.EscapeDataString($"{SelectedRepoInfo?.RepoId}") +
                    "&branchName=" + Uri.EscapeDataString($"{SelectedBranchInfo?.BranchName}") +
                    "&orgName=" + Uri.EscapeDataString(OrgName) +
                    "&pat=" + Uri.EscapeDataString(DevOpsPAT)
                );

                if (result != null && result.Any()) {
                    if (DevopsProjectInfos != null) {
                        foreach (var project in DevopsProjectInfos) {
                            if (project.ProjectId == SelectedProjectId) {
                                foreach (var repo in project.GitRepos) {
                                    if (repo.RepoId == SelectedRepoInfo?.RepoId) {
                                        foreach (var branch in repo.GitBranches) {
                                            if (branch.BranchName == SelectedBranchInfo?.BranchName) {
                                                branch.Files = result.ToList();
                                            } else {
                                                branch.Files = new List<DataObjects.DevopsFileItem>();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // If only one .csproj file exists, select it automatically.
                    var csprojFiles = result.Where(f => f.FileType.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase)).ToList();
                    if (csprojFiles.Count == 1) {
                        SelectedCsprojPath = csprojFiles[0].Path;
                    }
                }
            }
        } catch (Exception ex) {
            // Error in BranchChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task CsProjectFileChangedWizard(ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            // Handler invoked when a .csproj file is selected.
            SelectedCsprojPath = e?.Value?.ToString() ?? "";
        } catch (Exception ex) {
            // Error in CsProjectFileChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task EnvironmentChangedWizard(GlobalSettings.EnvironmentType envKey, ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            // Interpret the event argument as a boolean; consider using @bind for checkboxes to simplify binding.
            bool isChecked = e.Value != null && bool.TryParse(e.Value.ToString(), out bool result) && result;

            if (isChecked) {
                // Initialize settings when an environment is enabled.
                string websiteNameDefault = GlobalSettings.App.EnvironmentOptions[envKey]?.Hostname ?? string.Empty;
                var setting = new DataObjects.EnvSetting {
                    EnvName = envKey,
                    IISDeploymentType = "IISWebApplication",
                    WebsiteName = "" + websiteNameDefault,
                    VirtualPath = "/" + SelectedProjectInfo?.ProjectName?.ToLower(),
                    AppPoolName = "" + websiteNameDefault + "." + SelectedProjectInfo?.ProjectName?.ToLower(),
                    VariableGroupName = $"{SelectedProjectInfo?.ProjectName}_{GlobalSettings.App.VariableGroupNameDefault}_{envKey}"
                };

                EnvSettings[envKey] = setting;
            } else {
                // Remove settings when the environment is disabled.
                if (EnvSettings.ContainsKey(envKey)) {
                    EnvSettings.Remove(envKey);
                }
            }
        } catch (Exception ex) {
            // Error in EnvironmentChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task EnvironmentDeploymentTypeChangedWizard(GlobalSettings.EnvironmentType envKey, ChangeEventArgs e) {
        ClearLoadingMessages();
        _loading = true;
        StateHasChanged();
        try {
            // Extract deployment type from event arguments.
            string deploymentType = e.Value?.ToString() ?? "";
            if (EnvSettings.ContainsKey(envKey)) {
                EnvSettings[envKey].IISDeploymentType = deploymentType;
                if (deploymentType == "IISWebApplication" || deploymentType == "IISWebApplicationAuth") {
                    EnvSettings[envKey].VirtualPath = "/" + SelectedProjectInfo?.ProjectName?.ToLower();
                } else {
                    EnvSettings[envKey].VirtualPath = "";
                }
            }
        } catch (Exception ex) {
            // Error in EnvironmentDeploymentTypeChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task PipelineChangedWizard(ChangeEventArgs e) {
        try {
            ExistingYamlContent = string.Empty;
            NewYamlContent = string.Empty;
            SelectedPipelineId = 0;
            if (int.TryParse(e.Value?.ToString(), out int pid)) {
                SelectedPipelineId = pid;
            }
        } catch (Exception ex) {
            // Error in PipelineChangedWizard: ex.Message (suppressed)
        } finally {
            _loading = false;
            await Task.CompletedTask;
            StateHasChanged();
        }
    }

    private async Task NavigateToStep(int i) {
        currentStep = i;
        await Task.CompletedTask;
        StateHasChanged();
    }
}
