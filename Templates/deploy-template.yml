# deploy-template.yml
# ---------------------------------------------
# Step-level template for deploying a .NET zip artifact,
# logging parameters, setting a deploy directory variable,
# performing variable substitution on appsettings.json,
# deploying to IIS (either Website or Virtual Application),
# and cleaning up old release folders.
# Additionally, this template optionally copies IIS info JSON artifacts
# (collected from both DEV and PROD environments) into the deploy folder.
# ---------------------------------------------

parameters:
  - name: envFolderName
    type: string
    default: 'Dev'

  - name: basePath
    type: string
    default: 'C:\\Deployments'

  - name: projectName
    type: string
    default: 'SampleProjectName'

  - name: releaseRetention
    type: string
    default: '3'

  - name: artifactDir
    type: string
    default: 'Artifact'
    
  - name: IISDeploymentType 
    type: string
    default: 'IISWebApplication' # Options: 'IISWebsite', 'IISWebApplication'
    
  - name: WebsiteName
    type: string
    default: 'azuredev.em.wsu.edu'
    
  - name: VirtualPath
    type: string
    default: '/Hello'
    
  - name: PipeLineMode
    type: string
    default: 'Integrated'
    
  - name: AppPoolName
    type: string
    default: 'azuredev.em.wsu.edu.Hello'
    
  - name: DotNetVersion
    type: string
    default: 'v4.0'
    
  - name: AppPoolIdentity
    type: string
    default: 'ApplicationPoolIdentity'

  - name: AuthUsername
    type: string
    default: ''

  - name: AuthPassword
    type: string
    default: ''

  # New parameter for specifying files/folders for permission updates
  - name: GrantAccessToFilesAndFolders
    type: string
    default: 'appSettings.json,App_Plugins,umbraco,Views,wwwroot/css,wwwroot/media,wwwroot/scripts,wwwroot/umbraco,logs'

  # New parameters for specifying the names of the IIS info artifacts (without the .json extension)
  - name: IISInfoArtifactDev
    type: string
    default: ''   # If provided, the DEV IIS info artifact name (e.g. "IISInfo_AzureDev")
  - name: IISInfoArtifactProd
    type: string
    default: ''   # If provided, the PROD IIS info artifact name (e.g. "IISInfo_AzureProd")    
  - name: IISInfoArtifactCms
    type: string
    default: ''   # If provided, the PROD IIS info artifact name (e.g. "IISInfo_AzureCMS")
    
  # New optional parameter for binding overrides.
  # If provided, this value (which should be a JSON string) will override the computed bindings.
  - name: CustomBindings
    type: string
    default: ''

steps:
  #
  # 1) Expand the Zip, Echo Variables, and Set Deploy Directory Variable
  #
  - task: PowerShell@2
    displayName: "Extract Zip and Echo Variables"
    inputs:
      targetType: inline
      script: |
        Write-Host "=== Starting Deployment ==="
        Write-Host "Environment: ${{ parameters.envFolderName }}"
        Write-Host "Base Path: ${{ parameters.basePath }}"
        Write-Host "Project Name: ${{ parameters.projectName }}"
        Write-Host "Artifact Directory: ${{ parameters.artifactDir }}"
        Write-Host "IIS Deployment Type (param): ${{ parameters.IISDeploymentType }}"
        
        # Website Parameters
        Write-Host "Website Name: ${{ parameters.WebsiteName }}"
        Write-Host "App Pool Name: ${{ parameters.AppPoolName }}"
        Write-Host "DotNet Version: ${{ parameters.DotNetVersion }}"
        Write-Host "App Pool Identity: ${{ parameters.AppPoolIdentity }}"
        
        # Application Parameters
        Write-Host "Virtual Path: ${{ parameters.VirtualPath }}"
        Write-Host ""
        
        # Retrieve pipeline environment variables for BuildNumber & JobAttempt
        $buildNumber  = $env:BUILD_BUILDNUMBER
        $jobAttempt   = $env:SYSTEM_JOBATTEMPT

        # Compute final directory inline
        $CI_DEPLOY_DIR = "${{ parameters.basePath }}\${{ parameters.envFolderName }}\${{ parameters.projectName }}\1.$buildNumber`_$jobAttempt"
        Write-Host "Final Deploy Dir: $CI_DEPLOY_DIR"

        # Set pipeline variable for deploy directory
        Write-Host "##vso[task.setvariable variable=deployDir]$CI_DEPLOY_DIR"

        # Create directory if not existing
        if (!(Test-Path $CI_DEPLOY_DIR)) {
          New-Item -ItemType Directory -Path $CI_DEPLOY_DIR -Force | Out-Null
          Write-Host "Created directory: $CI_DEPLOY_DIR"
        }
        else {
          Write-Host "Directory already exists: $CI_DEPLOY_DIR"
        }

        ### **Begin Modified Section**
        # Dynamically search for the .zip file that starts with the project name
        Write-Host "Searching for .zip artifact starting with: '${{ parameters.projectName }}' in: $(Agent.BuildDirectory)"
        $searchPattern = "${{ parameters.projectName }}.*.zip"
        $zipFile = Get-ChildItem -Path "$(Agent.BuildDirectory)" -Recurse -Filter $searchPattern | Select-Object -First 1
        if ($zipFile) {
          $zipPath = $zipFile.FullName
          Write-Host "Found zip artifact at: $zipPath"
          Expand-Archive -Path $zipPath -DestinationPath $CI_DEPLOY_DIR -Force
          Write-Host "Extraction completed to $CI_DEPLOY_DIR."
        }
        else {
          Write-Host "Zip artifact starting with '${{ parameters.projectName }}' not found in: $(Agent.BuildDirectory)"
          Exit 1
        }
        ### **End Modified Section**

        Write-Host "=== Deployment Completed (no IIS actions yet) ==="

  #
  # New Step: Copy IIS Info JSON Files to Deploy Folder
  #
  - task: PowerShell@2
    displayName: "Copy IIS Info JSON Files to Deploy Folder"
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Starting IIS Info JSON copy step..."
        
        # Build an array of artifact names from the provided parameters (skip if empty)
        $artifactNames = @()
        if (-not [string]::IsNullOrWhiteSpace('${{ parameters.IISInfoArtifactDev }}')) {
            $artifactNames += '${{ parameters.IISInfoArtifactDev }}'
            Write-Host "Using IISInfoArtifactDev: $($artifactNames[-1])"
        }
        if (-not [string]::IsNullOrWhiteSpace('${{ parameters.IISInfoArtifactProd }}')) {
            $artifactNames += '${{ parameters.IISInfoArtifactProd }}'
            Write-Host "Using IISInfoArtifactProd: $($artifactNames[-1])"
        }
        if (-not [string]::IsNullOrWhiteSpace('${{ parameters.IISInfoArtifactCms }}')) {
            $artifactNames += '${{ parameters.IISInfoArtifactCms }}'
            Write-Host "Using IISInfoArtifactCms: $($artifactNames[-1])"
        }
        
        if ($artifactNames.Count -eq 0) {
            Write-Host "No IIS info artifact parameters provided. Skipping copy step."
            exit 0
        }
        
        foreach ($artifact in $artifactNames) {
            # Construct the expected folder path and file path:
            $sourceFolder = Join-Path "$(Pipeline.Workspace)" $artifact
            $sourceFile = Join-Path $sourceFolder "$artifact.json"
            Write-Host "Looking for file: $sourceFile"
            if (Test-Path $sourceFile) {
                Write-Host "Found IIS info file: $sourceFile"
                $destination = Join-Path "$(deployDir)" "$artifact.json"
                Copy-Item $sourceFile -Destination $destination -Force
                Write-Host "Copied '$artifact.json' to $destination"
            }
            else {
                Write-Host "WARNING: No matching IIS info JSON file found at $sourceFile for artifact '$artifact'."
            }
        }

  #
  # 2) Runtime Switch: set an Azure DevOps variable
  #
  - task: PowerShell@2
    displayName: "Switch on IISDeploymentType (set pipeline variable)"
    inputs:
      targetType: inline
      script: |
        $depType = "${{ parameters.IISDeploymentType }}"
        Write-Host "Checking IISDeploymentType..."
        switch ($depType) {
          'IISWebApplication' {
            Write-Host "Switch says: We're deploying an IIS Web Application."
            Write-Host "##vso[task.setvariable variable=DEPLOY_TYPE]IISWebApplication"
          }
          'IISWebsite' {
            Write-Host "Switch says: We're deploying an IIS Website."
            Write-Host "##vso[task.setvariable variable=DEPLOY_TYPE]IISWebsite"
          }
          'IISWebsiteAuth' {
            Write-Host "Switch says: We're deploying an IIS Website with custom auth."
            Write-Host "##vso[task.setvariable variable=DEPLOY_TYPE]IISWebsiteAuth"
          }
          default {
            Write-Host "Switch says: Unrecognized type: $depType"
            Write-Host "##vso[task.setvariable variable=DEPLOY_TYPE]Other"
          }
        }
        Write-Host "Finished switch-based test."

  #
  # 3) Variable Substitution on appsettings.json
  #
  - task: FileTransform@2
    displayName: "Variable Substitution in appsettings.json"
    inputs:
      folderPath: '$(deployDir)'
      enableXmlTransform: false
      jsonTargetFiles: '**/appsettings.json'

  #
  # Compute and Set Binding Variable (with override support)
  #
  - task: PowerShell@2
    displayName: "Compute and Set Binding Variable"
    inputs:
      targetType: inline
      script: |
        if (-not [string]::IsNullOrWhiteSpace('${{ parameters.CustomBindings }}')) {
          $bindings = '${{ parameters.CustomBindings }}'
          Write-Host "Custom bindings provided: $bindings"
        }
        else {
          $websiteName = '${{ parameters.WebsiteName }}'
          $bindings = "[{""protocol"":""http"",""port"":""80"",""hostname"":""" + $websiteName + """}]"
          Write-Host "Computed default bindings: $bindings"
        }
        # Set the computed or custom binding as a pipeline variable
        Write-Host "##vso[task.setvariable variable=bindings]$bindings"

  #
  # 4.a) Deploy IIS Website
  #
  - task: IISWebAppManagementOnMachineGroup@0
    displayName: "Deploy IIS Website"
    condition: eq(variables['DEPLOY_TYPE'], 'IISWebsite')
    inputs:
      IISDeploymentType: 'IISWebsite'
      ActionIISWebsite: 'CreateOrUpdateWebsite'
      WebsiteName: '${{ parameters.WebsiteName }}'
      WebsitePhysicalPath: '$(deployDir)'
      WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'
      AddBinding: true
      Bindings: '$(bindings)'
      CreateOrUpdateAppPoolForWebsite: true
      ConfigureAuthenticationForWebsite: true
      AppPoolNameForWebsite: '${{ parameters.AppPoolName }}'
      DotNetVersionForWebsite:  '${{ parameters.DotNetVersion }}'
      PipeLineModeForWebsite: '${{ parameters.PipeLineMode }}'
      AppPoolIdentityForWebsite: '${{ parameters.AppPoolIdentity }}'
      AnonymousAuthenticationForWebsite: true
      WindowsAuthenticationForWebsite: false

  #
  # 4.b) Deploy IIS Website with custom auth
  #
  - task: PowerShell@2
    displayName: "Set File & Folder Permissions for AuthUsername"
    condition: eq(variables['DEPLOY_TYPE'], 'IISWebsiteAuth')
    inputs:
      targetType: inline
      script: |
        Write-Host "=== Setting Permissions for AuthUsername ==="
        $deployDir = "$(deployDir)"
        Write-Host "Deployment Directory: $deployDir"
        $authUser = "${{ parameters.AuthUsername }}"
        if ([string]::IsNullOrWhiteSpace($authUser)) {
            Write-Host "ERROR: AuthUsername parameter is empty. Exiting."
            Exit 1
        }
        $itemsParam = "${{ parameters.GrantAccessToFilesAndFolders }}"
        if ([string]::IsNullOrWhiteSpace($itemsParam)) {
            Write-Host "ERROR: GrantAccessToFilesAndFolders parameter is empty. Exiting."
            Exit 1
        }
        $itemsToProcess = $itemsParam -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
        Write-Host "Items to process: $($itemsToProcess -join ', ')"
        foreach ($item in $itemsToProcess) {
            $itemPath = Join-Path $deployDir $item
            $isFile = $item.Contains('.')
            if ($isFile) {
                Write-Host "FILE: Attempting to set permissions for '$itemPath'"
                if (Test-Path $itemPath -PathType Leaf) {
                    try {
                        $acl = Get-Acl $itemPath
                        $rule = New-Object System.Security.AccessControl.FileSystemAccessRule(
                            $authUser,
                            "FullControl",
                            "Allow"
                        )
                        $acl.AddAccessRule($rule)
                        Set-Acl -Path $itemPath -AclObject $acl
                        Write-Host "SUCCESS: Permissions set on file: $itemPath"
                    }
                    catch {
                        Write-Host "ERROR: Failed to set permissions on file ${itemPath}: $($_.Exception.Message)"
                    }
                }
                else {
                    Write-Host "ERROR: File '$itemPath' not found."
                }
            }
            else {
                Write-Host "FOLDER: Attempting to set permissions for '$itemPath'"
                if (!(Test-Path $itemPath -PathType Container)) {
                    New-Item -ItemType Directory -Path $itemPath -Force | Out-Null
                    Write-Host "Created folder: $itemPath"
                }
                if (Test-Path $itemPath -PathType Container) {
                    try {
                        $acl = Get-Acl $itemPath
                        $acl.SetAccessRuleProtection($false, $true)
                        $ruleContainer = New-Object System.Security.AccessControl.FileSystemAccessRule(
                            $authUser,
                            "FullControl",
                            "ContainerInherit",
                            "None",
                            "Allow"
                        )
                        $ruleObject = New-Object System.Security.AccessControl.FileSystemAccessRule(
                            $authUser,
                            "FullControl",
                            "ObjectInherit",
                            "None",
                            "Allow"
                        )
                        $acl.AddAccessRule($ruleContainer)
                        $acl.AddAccessRule($ruleObject)
                        Set-Acl -Path $itemPath -AclObject $acl
                        Write-Host "SUCCESS: Permissions set on folder: $itemPath"
                    }
                    catch {
                        Write-Host "ERROR: Failed to set permissions on folder ${itemPath}: $($_.Exception.Message)"
                    }
                }
                else {
                    Write-Host "ERROR: Folder '$itemPath' not found even after attempting creation."
                }
            }
        }
        Write-Host "=== Completed Setting Permissions for AuthUsername ==="

  - task: IISWebAppManagementOnMachineGroup@0
    displayName: "Deploy IIS Website (Auth)"
    condition: eq(variables['DEPLOY_TYPE'], 'IISWebsiteAuth')
    inputs:
      IISDeploymentType: 'IISWebsite'
      ActionIISWebsite: 'CreateOrUpdateWebsite'
      WebsiteName: '${{ parameters.WebsiteName }}'
      WebsitePhysicalPath: '$(deployDir)'
      WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'
      AddBinding: true
      Bindings: '${{ parameters.CustomBindings }}'
      CreateOrUpdateAppPoolForWebsite: true
      ConfigureAuthenticationForWebsite: true
      AppPoolNameForWebsite: '${{ parameters.AppPoolName }}'
      DotNetVersionForWebsite: '${{ parameters.DotNetVersion }}'
      PipeLineModeForWebsite: '${{ parameters.PipeLineMode }}'
      AppPoolIdentityForWebsite: 'SpecificUser'
      AppPoolUsernameForWebsite: '${{ parameters.AuthUsername }}'
      AppPoolPasswordForWebsite: '${{ parameters.AuthPassword }}'
      AnonymousAuthenticationForWebsite: true
      WindowsAuthenticationForWebsite: false

  #
  # 4.c) Deploy IIS Virtual Application
  #
  - task: IISWebAppManagementOnMachineGroup@0
    displayName: "Deploy IIS Virtual Application"
    condition: eq(variables['DEPLOY_TYPE'], 'IISWebApplication')
    inputs:
      IISDeploymentType: 'IISWebApplication'
      ParentWebsiteNameForApplication:  '${{ parameters.WebsiteName }}'
      VirtualPathForApplication:  '${{ parameters.VirtualPath }}'
      PhysicalPathForApplication: '$(deployDir)'
      CreateOrUpdateAppPoolForApplication:  true
      AppPoolNameForApplication:  '${{ parameters.AppPoolName }}'
      DotNetVersionForApplication:  '${{ parameters.DotNetVersion }}'
      PipeLineModeForApplication:  '${{ parameters.PipeLineMode }}'
      AppPoolIdentityForApplication:  '${{ parameters.AppPoolIdentity }}'

  - task: PowerShell@2
    displayName: "Retention Policy: Remove Old Release Folders (with Info Dump)"
    inputs:
      targetType: inline
      script: |
        Write-Host "=== Retention Policy: Cleaning Up Old Releases ==="
        $deployBase = "${{ parameters.basePath }}\${{ parameters.envFolderName }}\${{ parameters.projectName }}"
        Write-Host "Looking for release folders in: $deployBase"
        if (!(Test-Path $deployBase)) {
            Write-Host "Deploy base folder does not exist. Exiting cleanup."
            exit 0
        }
        $allDirs = Get-ChildItem -Path $deployBase -Directory | Sort-Object CreationTime -Descending
        Write-Host "Found $($allDirs.Count) release directories:"
        foreach ($d in $allDirs) {
            Write-Host "   $($d.FullName)"
        }
        $currentRelease = $env:deployDir
        Write-Host "Current release folder: $currentRelease"
        Write-Host "=== IIS Information Dump ==="
        $iisPaths = @()
        try {
            Import-Module WebAdministration -ErrorAction Stop
            Write-Host "WebAdministration module loaded successfully."
            $sites = Get-Website
            Write-Host "Found $($sites.Count) IIS website(s):"
            foreach ($site in $sites) {
                Write-Host "   Site: $($site.Name) - PhysicalPath: $($site.physicalpath)"
                $iisPaths += $site.physicalpath
            }
            $apps = Get-WebApplication
            Write-Host "Found $($apps.Count) IIS web application(s):"
            foreach ($app in $apps) {
                Write-Host "   Application: $($app.Path) under Site: $($app.SiteName) - PhysicalPath: $($app.physicalpath)"
                $iisPaths += $app.physicalpath
            }
        }
        catch {
            Write-Host "Failed to load WebAdministration module or retrieve IIS info. Error: $_"
        }
        Write-Host "IIS Physical Paths in use:"
        foreach ($path in $iisPaths) {
            Write-Host "   $path"
        }
        $releaseRetention = [int]"${{ parameters.releaseRetention }}"
        Write-Host "Retaining the latest $releaseRetention release(s)."
        if ($allDirs.Count -le $releaseRetention) {
            Write-Host "No directories to delete as the count ($($allDirs.Count)) is less than or equal to the retention count ($releaseRetention)."
            exit 0
        }
        $dirsToDelete = $allDirs | Select-Object -Skip $releaseRetention
        Write-Host "Directories marked for deletion (before IIS check):"
        foreach ($dir in $dirsToDelete) {
            Write-Host "   $($dir.FullName)"
        }
        foreach ($dir in $dirsToDelete) {
            $dirNormalized = $dir.FullName.TrimEnd('\')
            $currentReleaseNormalized = $currentRelease.TrimEnd('\')
            if ($dirNormalized -eq $currentReleaseNormalized) {
                Write-Host "Skipping deletion of $($dir.FullName) because it is the current release directory."
                continue
            }
            $inUse = $false
            foreach ($iisPath in $iisPaths) {
                if ($dirNormalized -eq $iisPath.TrimEnd('\')) {
                    Write-Host "Skipping deletion of $($dir.FullName) because it is actively used by IIS (matched IIS path: $iisPath)."
                    $inUse = $true
                    break
                }
            }
            if (-not $inUse) {
                Write-Host "Deleting old release directory: $($dir.FullName)"
                Remove-Item -Path $dir.FullName -Recurse -Force
            }
        }
        Write-Host "=== Final Remaining Directories in Deploy Base ==="
        $remainingDirs = Get-ChildItem -Path $deployBase -Directory | Sort-Object CreationTime -Descending
        foreach ($d in $remainingDirs) {
            Write-Host "   $($d.FullName)"
        }
        Write-Host "Old release directories cleanup completed."

  #
  # 6) (Optional) Publish the Final Deploy Directory Path
  #
  #- task: PublishPipelineArtifact@1
  #  displayName: "Publish Deploy Directory Path"
  #  inputs:
  #    targetPath: '$(deployDir)'
  #    artifact: 'DeployDirectory'
