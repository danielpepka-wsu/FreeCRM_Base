# templates/build-template.yml
parameters:
  buildProjectName: ''
  buildCsProjectPath: ''
  buildPublishArgs: ''
  buildNamespace: ''


steps:
- checkout: BuildRepo
  displayName: "Check out BuildRepo"

- script: |
    echo "=== Building and Publishing ==="
    echo "Project Name: ${{ parameters.buildProjectName }}"
    echo "CSProj: ${{ parameters.buildCsProjectPath }}"
    echo "Publish Args: ${{ parameters.buildPublishArgs }}"
    echo "Build Namespace: ${{ parameters.buildNamespace }}"
  displayName: "Echo Build Parameters"

- task: UseDotNet@2
  displayName: 'Install .NET 6.x'
  inputs:
    version: '6.x'

- task: UseDotNet@2
  displayName: 'Install .NET 8.x'
  inputs:
    version: '8.x'

- task: UseDotNet@2
  displayName: 'Install .NET 9.x'
  inputs:
    version: '9.x'

- task: NuGetToolInstaller@0
  displayName: 'Install NuGet 6.x'
  inputs:
    versionSpec: '6.x'

- task: NodeTool@0
  displayName: 'Install Node (20.x)'
  inputs:
    versionSource: 'spec'
    versionSpec: '20.x'

- task: DotNetCoreCLI@2
  displayName: "Restore .NET Packages"
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/${{ parameters.buildCsProjectPath }}'


- task: PowerShell@2
  displayName: "Switch on buildNamespace (set pipeline variable)"
  inputs:
    targetType: inline
    script: |
      $depNamespace = "${{ parameters.buildNamespace }}"
      Write-Host "Checking if given a namespace..."
      switch ($depNamespace) {
        '' {
          Write-Host "Switch says: We were not given a namespace."
          Write-Host "##vso[task.setvariable variable=DO_BUILD_INFO]False"
        }
        default {
          Write-Host "Switch says: We were given a namespace."
          Write-Host "##vso[task.setvariable variable=DO_BUILD_INFO]True"
        }
      }
      Write-Host "Finished switch-based test."

- task: PowerShell@2
  displayName: "Hack it during cicd example 1: Generate DataController.Hello.cs"
  condition: eq(variables['DO_BUILD_INFO'], 'True')
  inputs:
    targetType: "inline"
    script: |
      # Define the C# code template with a placeholder for the namespace
      $codeTemplate = @"
      using Microsoft.AspNetCore.Mvc;

      namespace {{Namespace}}.Controllers;

      public partial class DataController
      {
          [HttpGet]
          [Route("~/api/Data/Hello")]
          public ActionResult<string> Hello([FromQuery] string world)
          {
              var result = "hello " + world;
              return Ok(result);
          }
      }
      "@

      # Replace the placeholder {{Namespace}} with the actual namespace provided
      $finalCode = $codeTemplate -replace '{{Namespace}}', '${{ parameters.buildNamespace }}'

      # Compute the project folder from the buildCsProjectPath parameter (remove the csproj file)
      $csprojFullPath = Join-Path -Path '$(Build.SourcesDirectory)' -ChildPath '${{ parameters.buildCsProjectPath }}'
      $projectFolder = [System.IO.Path]::GetDirectoryName($csprojFullPath)
      $controllersFolder = Join-Path -Path $projectFolder -ChildPath 'Controllers'

      # Define the output file path inside the Controllers folder
      $outputFilePath = Join-Path -Path $controllersFolder -ChildPath 'DataController.Hello.cs'

      # Ensure the Controllers folder exists
      if (-not (Test-Path -Path $controllersFolder)) {
          Write-Output "Controllers folder not found. Creating folder at '$controllersFolder'."
          New-Item -ItemType Directory -Path $controllersFolder -Force | Out-Null
      }

      # Write the final code to the specified output path
      try {
          $finalCode | Out-File -FilePath $outputFilePath -Encoding utf8 -Force
          Write-Output "DataController.Hello.cs successfully created at '$outputFilePath' with namespace '${{ parameters.buildNamespace }}'."
      }
      catch {
          Write-Error "Failed to write DataController.Hello.cs. Error: $_"
          exit 1
      }

      # Read the contents of the generated file and write it to the console
      try {
          $fileContent = Get-Content -Path $outputFilePath -Raw
          Write-Output "---- Contents of DataController.Hello.cs ----"
          Write-Output $fileContent
      }
      catch {
          Write-Error "Failed to read DataController.Hello.cs. Error: $_"
          exit 1
      }

- task: PowerShell@2
  displayName: "Hack it during cicd example 2: Generate DataController.BuildInfo.cs with Build Info"
  condition: eq(variables['DO_BUILD_INFO'], 'True')
  inputs:
    targetType: "inline"
    script: |
      # Define the C# code template with placeholders for the variables
      $codeTemplate = @"
      using Microsoft.AspNetCore.Mvc;

      namespace {{Namespace}}.Controllers;

      public partial class DataController
      {
          public static readonly string PipelineStartTime       = @"{{PipelineStartTime}}";
          public static readonly string BuildId                 = @"{{BuildId}}";
          public static readonly string BuildNumber             = @"{{BuildNumber}}";
          public static readonly string BuildUri                = @"{{BuildUri}}";
          public static readonly string DefinitionName          = @"{{DefinitionName}}";
          public static readonly string DefinitionId            = @"{{DefinitionId}}";
          public static readonly string TeamProject             = @"{{TeamProject}}";
          public static readonly string RepositoryName          = @"{{RepositoryName}}";
          public static readonly string RepositoryUri           = @"{{RepositoryUri}}";
          public static readonly string RepositoryId            = @"{{RepositoryId}}";
          public static readonly string RepositoryProvider      = @"{{RepositoryProvider}}";
          public static readonly string RepositoryLocalPath     = @"{{RepositoryLocalPath}}";
          public static readonly string SourceBranch            = @"{{SourceBranch}}";
          public static readonly string SourceBranchName        = @"{{SourceBranchName}}";
          public static readonly string SourceVersion           = @"{{SourceVersion}}";
          public static readonly string SourceVersionAuthor     = @"{{SourceVersionAuthor}}";
          public static readonly string SourceVersionMessage    = @"{{SourceVersionMessage}}";
          public static readonly string RequestedFor            = @"{{RequestedFor}}";
          public static readonly string RequestedForEmail       = @"{{RequestedForEmail}}";
          public static readonly string AgentId                 = @"{{AgentId}}";
          public static readonly string AgentName               = @"{{AgentName}}";
          public static readonly string AgentMachineName        = @"{{AgentMachineName}}";
          public static readonly string AgentOS                 = @"{{AgentOS}}";
          public static readonly string AgentVersion            = @"{{AgentVersion}}";
          public static readonly string BuildProjectName        = @"{{BuildProjectName}}";
          public static readonly string BuildNamespace          = @"{{BuildNamespace}}";
          public static readonly string DotNetVersion           = @"{{DotNetVersion}}";
          public static readonly string SourcesDirectory        = @"{{SourcesDirectory}}";

          [HttpGet]
          [Route("~/api/Data/BuildInfo")]
          public ActionResult<object> GetBuildInfo()
          {
              return new
              {
                  PipelineStartTime,
                  BuildId,
                  BuildNumber,
                  BuildUri,
                  DefinitionName,
                  DefinitionId,
                  TeamProject,
                  RepositoryName,
                  RepositoryUri,
                  RepositoryId,
                  RepositoryProvider,
                  RepositoryLocalPath,
                  SourceBranch,
                  SourceBranchName,
                  SourceVersion,
                  SourceVersionAuthor,
                  SourceVersionMessage,
                  RequestedFor,
                  RequestedForEmail,
                  AgentId,
                  AgentName,
                  AgentMachineName,
                  AgentOS,
                  AgentVersion,
                  BuildProjectName,
                  BuildNamespace,
                  DotNetVersion,
                  SourcesDirectory
              };
          }
      }
      "@

      $finalCode = $codeTemplate `
          -replace '{{Namespace}}', '${{ parameters.buildNamespace }}' `
          -replace '{{PipelineStartTime}}', $env:SYSTEM_PIPELINESTARTTIME `
          -replace '{{BuildId}}', $env:BUILD_BUILDID `
          -replace '{{BuildNumber}}', $env:BUILD_BUILDNUMBER `
          -replace '{{BuildUri}}', $env:BUILD_BUILDURI `
          -replace '{{DefinitionName}}', $env:BUILD_DEFINITIONNAME `
          -replace '{{DefinitionId}}', $env:SYSTEM_DEFINITIONID `
          -replace '{{TeamProject}}', $env:SYSTEM_TEAMPROJECT `
          -replace '{{RepositoryName}}', $env:BUILD_REPOSITORY_NAME `
          -replace '{{RepositoryUri}}', $env:BUILD_REPOSITORY_URI `
          -replace '{{RepositoryId}}', $env:BUILD_REPOSITORY_ID `
          -replace '{{RepositoryProvider}}', $env:BUILD_REPOSITORY_PROVIDER `
          -replace '{{RepositoryLocalPath}}', $env:BUILD_REPOSITORY_LOCALPATH `
          -replace '{{SourceBranch}}', $env:BUILD_SOURCEBRANCH `
          -replace '{{SourceBranchName}}', $env:BUILD_SOURCEBRANCHNAME `
          -replace '{{SourceVersion}}', $env:BUILD_SOURCEVERSION `
          -replace '{{SourceVersionAuthor}}', $env:BUILD_SOURCEVERSIONAUTHOR `
          -replace '{{SourceVersionMessage}}', $env:BUILD_SOURCEVERSIONMESSAGE `
          -replace '{{RequestedFor}}', $env:BUILD_REQUESTEDFOR `
          -replace '{{RequestedForEmail}}', $env:BUILD_REQUESTEDFOREMAIL `
          -replace '{{AgentId}}', $env:AGENT_ID `
          -replace '{{AgentName}}', $env:AGENT_NAME `
          -replace '{{AgentMachineName}}', $env:AGENT_MACHINENAME `
          -replace '{{AgentOS}}', $env:AGENT_OS `
          -replace '{{AgentVersion}}', $env:AGENT_VERSION `
          -replace '{{BuildProjectName}}', $env:CI_BUILD_PROJECTNAME `
          -replace '{{BuildNamespace}}', $env:CI_BUILD_NAMESPACE `
          -replace '{{DotNetVersion}}', $env:CI_DOTNETVERSION_DEV `
          -replace '{{SourcesDirectory}}', $env:BUILD_SOURCESDIRECTORY

      $csprojFullPath = Join-Path -Path $env:BUILD_SOURCESDIRECTORY -ChildPath '${{ parameters.buildCsProjectPath }}'
      $projectFolder = [System.IO.Path]::GetDirectoryName($csprojFullPath)
      $controllersFolder = Join-Path -Path $projectFolder -ChildPath 'Controllers'
      $outputFilePath = Join-Path -Path $controllersFolder -ChildPath 'DataController.BuildInfo.cs'

      if (-not (Test-Path -Path $controllersFolder)) {
          Write-Output "Controllers folder not found. Creating folder at '$controllersFolder'."
          New-Item -ItemType Directory -Path $controllersFolder -Force | Out-Null
      }

      try {
          $finalCode | Out-File -FilePath $outputFilePath -Encoding utf8 -Force
          Write-Output "DataController.BuildInfo.cs successfully created at '$outputFilePath'."
      }
      catch {
          Write-Error "Failed to write DataController.BuildInfo.cs. Error: $_"
          exit 1
      }

      try {
          $fileContent = Get-Content -Path $outputFilePath -Raw
          Write-Output "---- Contents of DataController.BuildInfo.cs ----"
          Write-Output $fileContent
      }
      catch {
          Write-Error "Failed to read DataController.BuildInfo.cs. Error: $_"
          exit 1
      }

- script: |
    dotnet publish "$(Build.SourcesDirectory)\\${{ parameters.buildCsProjectPath }}" ${{ parameters.buildPublishArgs }} --output "$(Build.ArtifactStagingDirectory)\publish\${{ parameters.buildProjectName }}\"
  displayName: "DotNet Publish"

- task: PowerShell@2
  displayName: "Zip Published Output"
  inputs:
    targetType: inline
    script: |
      $publishFolder = "$(Build.ArtifactStagingDirectory)\publish\${{ parameters.buildProjectName }}"
      $zipPath = "$(Build.ArtifactStagingDirectory)\${{ parameters.buildProjectName }}.1.$(Build.BuildNumber).zip"
      if (Test-Path $publishFolder) {
        Compress-Archive -Path "$publishFolder\*" -DestinationPath $zipPath -Force -CompressionLevel Fastest
        Write-Host "Zipped files to $zipPath"
      }
      else {
        Write-Host "Publish folder not found: $publishFolder"
        Exit 1
      }

- task: PublishBuildArtifacts@1
  displayName: "Publish Zip Artifact"
  inputs:
    PathtoPublish: "$(Build.ArtifactStagingDirectory)\\${{ parameters.buildProjectName }}.1.$(Build.BuildNumber).zip"
    ArtifactName: "${{ parameters.buildProjectName }}.Artifact"

- template: clean-workspace-template.yml
